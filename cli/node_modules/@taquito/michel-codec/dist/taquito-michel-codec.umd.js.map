{"version":3,"file":"taquito-michel-codec.umd.js","sources":["../src/micheline.ts","../src/scan.ts","../src/macros.ts","../src/micheline-parser.ts","../src/micheline-emitter.ts","../src/base58.ts","../src/utils.ts","../src/michelson-validator.ts","../src/michelson-typecheck.ts","../src/michelson-contract.ts","../src/formatters.ts"],"sourcesContent":["// Michelson abstract syntax tree types https://tezos.gitlab.io/whitedoc/michelson.html#concrete-syntax\n\nexport type SourceReference = {\n    first: number;\n    last: number;\n    macro?: Expr;\n};\n\nexport const sourceReference: unique symbol = Symbol(\"source_reference\");\n\nexport interface Node {\n    [sourceReference]?: SourceReference;\n}\n\n/**\n * An AST node representing Michelson string literal.\n */\nexport interface StringLiteral extends Node {\n    string: string;\n}\n\n/**\n * An AST node representing Michelson int literal.\n */\nexport interface IntLiteral extends Node {\n    int: string;\n}\n\n/**\n * An AST node representing Michelson bytes literal.\n */\nexport interface BytesLiteral extends Node {\n    bytes: string;\n}\n\n/**\n * An AST node representing Michelson primitive.\n */\nexport interface Prim<PT extends string = string, AT extends Expr[] = Expr[]> extends Node {\n    prim: PT;\n    args?: AT;\n    annots?: string[];\n}\n\nexport type List<T extends Expr> = T[] & Node;\n\ninterface ExprList extends List<Expr> { }\n\n/**\n * An AST node representing valid Michelson expression. Directly corresponds to JSON-encoded Michelson node\n */\n\nexport type Expr = Prim | StringLiteral | IntLiteral | BytesLiteral | ExprList;\n","export class ScanError extends Error {\n    constructor(public src: string, public idx: number, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, ScanError.prototype);\n    }\n}\n\nexport enum Literal {\n    Comment,\n    Number,\n    String,\n    Bytes,\n    Ident,\n}\n\nexport type TokenType = \"(\" | \")\" | \"{\" | \"}\" | \";\" | Literal;\n\nconst isSpace = new RegExp(\"\\\\s\");\nconst isIdentStart = new RegExp(\"[:@%_A-Za-z]\");\nconst isIdent = new RegExp(\"[@%_\\\\.A-Za-z0-9]\");\nconst isDigit = new RegExp(\"[0-9]\");\nconst isHex = new RegExp(\"[0-9a-fA-F]\");\n\nexport interface Token {\n    t: TokenType;\n    v: string;\n    first: number;\n    last: number;\n}\n\nexport function* scan(src: string, scanComments = false): Generator<Token, void> {\n    let i = 0;\n    while (i < src.length) {\n        // Skip space\n        while (i < src.length && isSpace.test(src[i])) {\n            i++;\n        }\n        if (i === src.length) {\n            return;\n        }\n\n        const s = src[i];\n        const start = i;\n        if (isIdentStart.test(s)) {\n            // Identifier\n            i++;\n            while (i < src.length && isIdent.test(src[i])) {\n                i++;\n            }\n            yield { t: Literal.Ident, v: src.slice(start, i), first: start, last: i };\n        } else if (src.length - i > 1 && src.substr(i, 2) === \"0x\") {\n            // Bytes\n            i += 2;\n            while (i < src.length && isHex.test(src[i])) {\n                i++;\n            }\n            if (((i - start) & 1) !== 0) {\n                throw new ScanError(src, i, \"Bytes literal length is expected to be power of two\");\n            }\n            yield { t: Literal.Bytes, v: src.slice(start, i), first: start, last: i };\n        } else if (isDigit.test(s) || s === \"-\") {\n            // Number\n            if (s === \"-\") {\n                i++;\n            }\n            const ii = i;\n            while (i < src.length && isDigit.test(src[i])) {\n                i++;\n            }\n            if (ii === i) {\n                throw new ScanError(src, i, \"Number literal is too short\");\n            }\n            yield { t: Literal.Number, v: src.slice(start, i), first: start, last: i };\n        } else if (s === \"\\\"\") {\n            // String\n            i++;\n            let esc = false;\n            for (; i < src.length && (esc || src[i] !== \"\\\"\"); i++) {\n                if (!esc && src[i] === \"\\\\\") {\n                    esc = true;\n                } else {\n                    esc = false;\n                }\n            }\n            if (i === src.length) {\n                throw new ScanError(src, i, \"Unterminated string literal\");\n            }\n            i++;\n            yield { t: Literal.String, v: src.slice(start, i), first: start, last: i };\n        } else if (s === \"#\") {\n            // Comment\n            i++;\n            while (i < src.length && src[i] !== \"\\n\") {\n                i++;\n            }\n            if (scanComments) {\n                yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n            }\n        } else if (src.length - i > 1 && src.substr(i, 2) === \"/*\") {\n            // C style comment\n            i += 2;\n            while (i < src.length && !(src.length - i > 1 && src.substr(i, 2) === \"*/\")) {\n                i++;\n            }\n            if (i === src.length) {\n                throw new ScanError(src, i, \"Unterminated C style comment\");\n            }\n            i += 2;\n            if (scanComments) {\n                yield { t: Literal.Comment, v: src.slice(start, i), first: start, last: i };\n            }\n        } else if (s === \"(\" || s === \")\" || s === \"{\" || s === \"}\" || s === \";\") {\n            i++;\n            yield { t: s, v: s, first: start, last: i };\n        } else {\n            throw new ScanError(src, i, `Invalid character at offset ${i}: \\`${s}'`);\n        }\n    }\n}","import { Prim, Expr, IntLiteral } from \"./micheline\";\nimport { Tuple, NoArgs, ReqArgs, NoAnnots } from \"./utils\";\n\nexport class MacroError extends Error {\n    constructor(public prim: Prim, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, MacroError.prototype);\n    }\n}\n\nfunction assertArgs<N extends number>(ex: Prim, n: N):\n    ex is N extends 0 ?\n    NoArgs<Prim<string>> :\n    ReqArgs<Prim<string, Tuple<N, Expr>>> {\n    if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n        return true;\n    }\n    throw new MacroError(ex, `macro ${ex.prim} expects ${n} arguments, was given ${ex.args?.length}`);\n}\n\nfunction assertNoAnnots(ex: Prim): ex is NoAnnots<Prim> {\n    if (ex.annots === undefined) {\n        return true;\n    }\n    throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${ex.annots}`);\n}\n\nfunction assertIntArg(ex: Prim, arg: Expr): arg is IntLiteral {\n    if (\"int\" in arg) {\n        return true;\n    }\n    throw new MacroError(ex, `macro ${ex.prim} expects int argument`);\n}\n\ntype PT = [number, [string | null, string | null]];\n\nfunction parsePairUnpairExpr(p: Prim, expr: string, annotations: string[], agg: (l: PT[] | undefined, r: PT[] | undefined, top: PT) => PT[]): { r: PT[], n: number, an: number } {\n    let i = 0;\n    let ai = 0;\n    const ann: [string | null, string | null] = [null, null];\n\n    // Left expression\n    let lexpr: PT[] | undefined;\n    if (i === expr.length) {\n        throw new MacroError(p, `unexpected end: ${p.prim}`);\n    }\n    let c = expr[i++];\n    switch (c) {\n        case \"P\":\n            const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n            lexpr = r;\n            i += n;\n            ai += an;\n            break;\n        case \"A\":\n            if (ai !== annotations.length) {\n                ann[0] = annotations[ai++];\n            }\n            break;\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n\n    // Right expression\n    let rexpr: PT[] | undefined;\n    if (i === expr.length) {\n        throw new MacroError(p, `unexpected end: ${p.prim}`);\n    }\n    c = expr[i++];\n    switch (c) {\n        case \"P\":\n            const { r, n, an } = parsePairUnpairExpr(p, expr.slice(i), annotations.slice(ai), agg);\n            rexpr = r.map<PT>(([v, a]) => [v + 1, a]);\n            i += n;\n            ai += an;\n            break;\n        case \"I\":\n            if (ai !== annotations.length) {\n                ann[1] = annotations[ai++];\n            }\n            break;\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n\n    return { r: agg(lexpr, rexpr, [0, ann]), n: i, an: ai };\n}\n\nfunction parseSetMapCadr(p: Prim, expr: string, vann: string[], term: { a: Expr, d: Expr }): Expr {\n    const c = expr[0];\n    switch (c) {\n        case \"A\":\n            return expr.length > 1 ?\n                [\n                    { prim: \"DUP\" },\n                    {\n                        prim: \"DIP\",\n                        args: [[\n                            { prim: \"CAR\", annots: [\"@%%\"] },\n                            parseSetMapCadr(p, expr.slice(1), [], term),\n                        ]],\n                    },\n                    { prim: \"CDR\", annots: [\"@%%\"] },\n                    { prim: \"SWAP\" },\n                    { prim: \"PAIR\", annots: [\"%@\", \"%@\", ...vann] },\n                ] : term.a;\n\n        case \"D\":\n            return expr.length > 1 ?\n                [\n                    { prim: \"DUP\" },\n                    {\n                        prim: \"DIP\",\n                        args: [[\n                            { prim: \"CDR\", annots: [\"@%%\"] },\n                            parseSetMapCadr(p, expr.slice(1), [], term),\n                        ]],\n                    },\n                    { prim: \"CAR\", annots: [\"@%%\"] },\n                    { prim: \"PAIR\", annots: [\"%@\", \"%@\", ...vann] },\n                ] : term.d;\n\n        default:\n            throw new MacroError(p, `${p.prim}: unexpected character: ${c}`);\n    }\n}\n\nfunction trimLast<T>(a: T[], v: T): T[] {\n    let l = a.length;\n    while (l > 0 && a[l - 1] === v) {\n        l--;\n    }\n    return a.slice(0, l);\n}\n\nfunction filterAnnotations(a?: string[]): {\n    fields: string[];\n    rest: string[];\n} {\n    const fields: string[] = [];\n    const rest: string[] = [];\n    if (a !== undefined) {\n        for (const v of a) {\n            (v.length !== 0 && v[0] === \"%\" ? fields : rest).push(v);\n        }\n    }\n    return { fields, rest };\n}\n\nfunction mkPrim({ prim, annots, args }: Prim): Prim {\n    return {\n        prim,\n        ...(annots && { annots }),\n        ...(args && { args }),\n    };\n}\n\nconst pairRe = /^P[PAI]{3,}R$/;\nconst unpairRe = /^UNP[PAI]{2,}R$/;\nconst cadrRe = /^C[AD]{2,}R$/;\nconst setCadrRe = /^SET_C[AD]+R$/;\nconst mapCadrRe = /^MAP_C[AD]+R$/;\nconst diipRe = /^DI{2,}P$/;\nconst duupRe = /^DU+P$/;\n\nexport function expandMacros(ex: Prim): Expr {\n    function mayRename(annots?: string[]): Prim[] {\n        return annots !== undefined ? [{ prim: \"RENAME\", annots }] : [];\n    }\n\n    switch (ex.prim) {\n        // Compare\n        case \"CMPEQ\":\n        case \"CMPNEQ\":\n        case \"CMPLT\":\n        case \"CMPGT\":\n        case \"CMPLE\":\n        case \"CMPGE\":\n            if (assertArgs(ex, 0)) {\n                return [\n                    { prim: \"COMPARE\" },\n                    mkPrim({ prim: ex.prim.slice(3), annots: ex.annots }),\n                ];\n            }\n            break;\n\n        case \"IFEQ\":\n        case \"IFNEQ\":\n        case \"IFLT\":\n        case \"IFGT\":\n        case \"IFLE\":\n        case \"IFGE\":\n            if (assertArgs(ex, 2)) {\n                return [\n                    { prim: ex.prim.slice(2) },\n                    mkPrim({ prim: \"IF\", annots: ex.annots, args: ex.args }),\n                ];\n            }\n            break;\n\n        case \"IFCMPEQ\":\n        case \"IFCMPNEQ\":\n        case \"IFCMPLT\":\n        case \"IFCMPGT\":\n        case \"IFCMPLE\":\n        case \"IFCMPGE\":\n            if (assertArgs(ex, 2)) {\n                return [\n                    { prim: \"COMPARE\" },\n                    { prim: ex.prim.slice(5) },\n                    mkPrim({ prim: \"IF\", annots: ex.annots, args: ex.args }),\n                ];\n            }\n            break;\n\n        // Fail\n        case \"FAIL\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    { prim: \"UNIT\" },\n                    { prim: \"FAILWITH\" },\n                ];\n            }\n            break;\n\n        // Assertion macros\n        case \"ASSERT\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [{\n                    prim: \"IF\", args: [\n                        [],\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                    ]\n                }];\n            }\n            break;\n\n        case \"ASSERT_EQ\":\n        case \"ASSERT_NEQ\":\n        case \"ASSERT_LT\":\n        case \"ASSERT_GT\":\n        case \"ASSERT_LE\":\n        case \"ASSERT_GE\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    { prim: ex.prim.slice(7) },\n                    {\n                        prim: \"IF\", args: [\n                            [],\n                            [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                        ]\n                    },\n                ];\n            }\n            break;\n\n        case \"ASSERT_CMPEQ\":\n        case \"ASSERT_CMPNEQ\":\n        case \"ASSERT_CMPLT\":\n        case \"ASSERT_CMPGT\":\n        case \"ASSERT_CMPLE\":\n        case \"ASSERT_CMPGE\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [\n                    [\n                        { prim: \"COMPARE\" },\n                        { prim: ex.prim.slice(10) },\n                    ],\n                    {\n                        prim: \"IF\", args: [\n                            [],\n                            [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                        ]\n                    },\n                ];\n            }\n            break;\n\n        case \"ASSERT_NONE\":\n            if (assertArgs(ex, 0) && assertNoAnnots(ex)) {\n                return [{\n                    prim: \"IF_NONE\", args: [\n                        [],\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                    ]\n                }];\n            }\n            break;\n\n        case \"ASSERT_SOME\":\n            if (assertArgs(ex, 0)) {\n                return [{\n                    prim: \"IF_NONE\", args: [\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                        mayRename(ex.annots),\n                    ]\n                }];\n            }\n            break;\n\n        case \"ASSERT_LEFT\":\n            if (assertArgs(ex, 0)) {\n                return [{\n                    prim: \"IF_LEFT\", args: [\n                        mayRename(ex.annots),\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                    ]\n                }];\n            }\n            break;\n\n        case \"ASSERT_RIGHT\":\n            if (assertArgs(ex, 0)) {\n                return [{\n                    prim: \"IF_LEFT\", args: [\n                        [[{ prim: \"UNIT\" }, { prim: \"FAILWITH\" }]],\n                        mayRename(ex.annots),\n                    ]\n                }];\n            }\n            break;\n\n        // Syntactic conveniences\n\n        case \"IF_SOME\":\n            if (assertArgs(ex, 2)) {\n                return [mkPrim({ prim: \"IF_NONE\", annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n            }\n            break;\n\n        case \"IF_RIGHT\":\n            if (assertArgs(ex, 2)) {\n                return [mkPrim({ prim: \"IF_LEFT\", annots: ex.annots, args: [ex.args[1], ex.args[0]] })];\n            }\n    }\n\n    // More syntactic conveniences\n\n    // PAPPAIIR macro\n    if (pairRe.test(ex.prim)) {\n        if (assertArgs(ex, 0)) {\n            const { fields, rest } = filterAnnotations(ex.annots);\n            const { r } = parsePairUnpairExpr(ex, ex.prim.slice(1), fields, (l, r, top) => [...(l || []), ...(r || []), top]);\n\n            return r.map(([v, a], i) => {\n                const ann = [\n                    ...trimLast(a, null).map(v => v === null ? \"%\" : v),\n                    ...((v === 0 && i === r.length - 1) ? rest : [])];\n\n                const leaf = mkPrim({ prim: \"PAIR\", annots: ann.length !== 0 ? ann : undefined, });\n\n                return v === 0 ? leaf : {\n                    prim: \"DIP\",\n                    args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n                };\n            });\n        }\n    }\n\n    // UNPAPPAIIR macro\n    if (unpairRe.test(ex.prim)) {\n        if (assertArgs(ex, 0)) {\n            const { r } = parsePairUnpairExpr(ex, ex.prim.slice(3), ex.annots || [], (l, r, top) => [top, ...(r || []), ...(l || [])]);\n            return r.map(([v, a]) => {\n                const leaf: Prim[] = [\n                    { prim: \"DUP\" },\n                    mkPrim({ prim: \"CAR\", annots: a[0] !== null ? [a[0]] : undefined }),\n                    {\n                        prim: \"DIP\",\n                        args: [[mkPrim({ prim: \"CDR\", annots: a[1] !== null ? [a[1]] : undefined })]],\n                    }\n                ];\n\n                return v === 0 ? leaf : {\n                    prim: \"DIP\",\n                    args: v === 1 ? [[leaf]] : [{ int: String(v) }, [leaf]],\n                };\n            });\n        }\n    }\n\n    // C[AD]+R macro\n    if (cadrRe.test(ex.prim)) {\n        if (assertArgs(ex, 0)) {\n            const ch = [...ex.prim.slice(1, ex.prim.length - 1)];\n\n            return ch.map<Prim>((c, i) => {\n                const ann = i === ch.length - 1 ? ex.annots : undefined;\n                switch (c) {\n                    case \"A\":\n                        return mkPrim({ prim: \"CAR\", annots: ann });\n                    case \"D\":\n                        return mkPrim({ prim: \"CDR\", annots: ann });\n                    default:\n                        throw new MacroError(ex, `unexpected character: ${c}`);\n                }\n            });\n        }\n    }\n\n    // SET_C[AD]+R macro\n    if (setCadrRe.test(ex.prim)) {\n        if (assertArgs(ex, 0)) {\n            const { fields, rest } = filterAnnotations(ex.annots);\n            if (fields.length > 1) {\n                throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n            }\n\n            const term = fields.length !== 0 ?\n                {\n                    a: [\n                        { prim: \"DUP\" },\n                        { prim: \"CAR\", annots: fields },\n                        { prim: \"DROP\" },\n                        { prim: \"CDR\", annots: [\"@%%\"] },\n                        { prim: \"SWAP\" },\n                        { prim: \"PAIR\", annots: [fields[0], \"%@\"] },\n                    ],\n                    d: [\n                        { prim: \"DUP\" },\n                        { prim: \"CDR\", annots: fields },\n                        { prim: \"DROP\" },\n                        { prim: \"CAR\", annots: [\"@%%\"] },\n                        { prim: \"PAIR\", annots: [\"%@\", fields[0]] },\n                    ],\n                } :\n                {\n                    a: [\n                        { prim: \"CDR\", annots: [\"@%%\"] },\n                        { prim: \"SWAP\" },\n                        { prim: \"PAIR\", annots: [\"%\", \"%@\"] },\n                    ],\n                    d: [\n                        { prim: \"CAR\", annots: [\"@%%\"] },\n                        { prim: \"PAIR\", annots: [\"%@\", \"%\"] },\n                    ],\n                };\n\n            return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), rest, term);\n        }\n    }\n\n    // MAP_C[AD]+R macro\n    if (mapCadrRe.test(ex.prim)) {\n        if (assertArgs(ex, 1)) {\n            const { fields } = filterAnnotations(ex.annots);\n            if (fields.length > 1) {\n                throw new MacroError(ex, `unexpected annotation on macro ${ex.prim}: ${fields}`);\n            }\n\n            const term = {\n                a: [\n                    { prim: \"DUP\" },\n                    { prim: \"CDR\", annots: [\"@%%\"] },\n                    {\n                        prim: \"DIP\", args: [[\n                            mkPrim({ prim: \"CAR\", annots: fields.length !== 0 ? [\"@\" + fields[0].slice(1)] : undefined }),\n                            ex.args[0],\n                        ]]\n                    },\n                    { prim: \"SWAP\" },\n                    { prim: \"PAIR\", annots: [fields.length !== 0 ? fields[0] : \"%\", \"%@\"] },\n                ],\n                d: [\n                    { prim: \"DUP\" },\n                    mkPrim({ prim: \"CDR\", annots: fields.length !== 0 ? [\"@\" + fields[0].slice(1)] : undefined }),\n                    ex.args[0],\n                    { prim: \"SWAP\" },\n                    { prim: \"CAR\", annots: [\"@%%\"] },\n                    { prim: \"PAIR\", annots: [\"%@\", fields.length !== 0 ? fields[0] : \"%\"] },\n                ],\n            };\n\n            return parseSetMapCadr(ex, ex.prim.slice(5, ex.prim.length - 1), [], term);\n        }\n    }\n\n    // Expand deprecated DI...IP to [DIP n]\n    if (diipRe.test(ex.prim)) {\n        if (assertArgs(ex, 1)) {\n            let n = 0;\n            while (ex.prim[1 + n] === \"I\") { n++; }\n            return mkPrim({ prim: \"DIP\", args: [{ int: String(n) }, ex.args[0]] });\n        }\n    }\n\n    // Expand modern DUP n or deprecated DU...UP\n    if (duupRe.test(ex.prim)) {\n        let n = 0;\n        while (ex.prim[1 + n] === \"U\") { n++; }\n\n        if (n === 1) {\n            if (ex.args === undefined) {\n                return ex; // skip\n            }\n            if (assertArgs(ex, 1) && assertIntArg(ex, ex.args[0])) {\n                n = parseInt(ex.args[0].int, 10);\n            }\n        } else {\n            assertArgs(ex, 0);\n        }\n\n        if (n === 1) {\n            return [mkPrim({ prim: \"DUP\", annots: ex.annots })];\n\n        } else if (n === 2) {\n            return [\n                {\n                    prim: \"DIP\",\n                    args: [[mkPrim({ prim: \"DUP\", annots: ex.annots })]],\n                },\n                { prim: \"SWAP\" },\n            ];\n\n        } else {\n            return [\n                {\n                    prim: \"DIP\",\n                    args: [\n                        { int: String(n - 1) },\n                        [mkPrim({ prim: \"DUP\", annots: ex.annots })],\n                    ],\n                },\n                {\n                    prim: \"DIG\",\n                    args: [{ int: String(n) }],\n                },\n            ];\n        }\n\n    }\n\n    return ex;\n}","import { scan, Token, Literal } from './scan';\nimport { Expr, Prim, StringLiteral, IntLiteral, BytesLiteral, sourceReference, List, SourceReference } from './micheline';\nimport { expandMacros } from './macros';\nimport { lstat } from 'fs';\n\nexport class MichelineParseError extends Error {\n    /**\n     * @param token A token caused the error\n     * @param message An error message\n     */\n    constructor(public token: Token | null, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, MichelineParseError.prototype);\n    }\n}\n\nexport class JSONParseError extends Error {\n    /**\n     * @param node A node caused the error\n     * @param message An error message\n     */\n    constructor(public node: any, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, JSONParseError.prototype);\n    }\n}\n\nconst errEOF = new MichelineParseError(null, 'Unexpected EOF');\n\nfunction isAnnotation(tok: Token): boolean {\n    return tok.t === Literal.Ident && (tok.v[0] === '@' || tok.v[0] === '%' || tok.v[0] === ':');\n}\n\nconst intRe = new RegExp('^-?[0-9]+$');\nconst bytesRe = new RegExp('^([0-9a-fA-F]{2})*$');\n\nexport interface ParserOptions {\n    /**\n     * Expand [Michelson macros](https://tezos.gitlab.io/whitedoc/michelson.html#macros) during parsing.\n     */\n    expandMacros: boolean;\n}\n\n/**\n * Converts and validates Michelson expressions between JSON-based Michelson and Micheline\n *\n * Pretty Print a Michelson Smart Contract:\n * ```\n * const contract = await Tezos.contract.at(\"KT1Vsw3kh9638gqWoHTjvHCoHLPKvCbMVbCg\");\n * const p = new Parser();\n *\n * const michelsonCode = p.parseJSON(contract.script.code);\n * const storage = p.parseJSON(contract.script.storage);\n *\n * console.log(\"Pretty print Michelson smart contract:\");\n * console.log(emitMicheline(michelsonCode, {indent:\"    \", newline: \"\\n\",}));\n *\n * console.log(\"Pretty print Storage:\");\n * console.log(emitMicheline(storage, {indent:\"    \", newline: \"\\n\",}));\n * ```\n *\n * Encode a Michelson expression for inital storage of a smart contract\n * ```\n * const src = `(Pair (Pair { Elt 1\n *                (Pair (Pair \"tz1gjaF81ZRRvdzjobyfVNsAeSC6PScjfQwN\" \"tz1KqTpEZ7Yob7QbPE4Hy4Wo8fHG8LhKxZSx\")\n *                      0x0501000000026869) }\n *          10000000)\n *    (Pair 2 333))`;\n *\n * const p = new Parser();\n *\n * const exp = p.parseMichelineExpression(src);\n * console.log(JSON.stringify(exp));\n * ```\n */\nexport class Parser {\n    constructor(private opt?: ParserOptions) { }\n\n    private expand(ex: Prim): Expr {\n        if (this.opt?.expandMacros) {\n            const ret = expandMacros(ex);\n            if (ret !== ex) {\n                ret[sourceReference] = { ...(ex[sourceReference] || { first: 0, last: 0 }), macro: ex };\n            }\n            return ret;\n        } else {\n            return ex;\n        }\n    }\n\n    private parseList(scanner: Iterator<Token>, start: Token): Expr {\n        const tok = scanner.next();\n        if (tok.done) {\n            throw errEOF;\n        }\n\n        if (tok.value.t !== Literal.Ident) {\n            throw new MichelineParseError(tok.value, `not an identifier: ${tok.value.v}`);\n        }\n\n        const ret: Prim = {\n            prim: tok.value.v,\n        };\n\n        let last: number;\n        for (; ;) {\n            const tok = scanner.next();\n            if (tok.done) {\n                throw errEOF;\n            }\n            if (tok.value.t === ')') {\n                last = tok.value.last;\n                break;\n            }\n            if (isAnnotation(tok.value)) {\n                ret.annots = ret.annots || [];\n                ret.annots.push(tok.value.v);\n            } else {\n                ret.args = ret.args || [];\n                ret.args.push(this.parseExpr(scanner, tok.value));\n            }\n        }\n        ret[sourceReference] = {\n            first: start.first,\n            last,\n        };\n        return this.expand(ret);\n    }\n\n    private parseArgs(scanner: Iterator<Token>, start: Token): [Prim, IteratorResult<Token>] {\n        // Identifier with arguments\n        const ref: SourceReference = {\n            first: start.first,\n            last: start.last,\n        };\n        const p: Prim = { prim: start.v, [sourceReference]: ref };\n\n        for (; ;) {\n            const t = scanner.next();\n            if (t.done || t.value.t === '}' || t.value.t === ';') {\n                return [p, t];\n            }\n\n            if (isAnnotation(t.value)) {\n                ref.last = t.value.last;\n                p.annots = p.annots || [];\n                p.annots.push(t.value.v);\n            } else {\n                const arg = this.parseExpr(scanner, t.value);\n                ref.last = arg[sourceReference]?.last || ref.last;\n                p.args = p.args || [];\n                p.args.push(arg);\n            }\n        }\n    }\n\n    private parseSequence(scanner: Iterator<Token>, start: Token): List<Expr> {\n        const ref: SourceReference = {\n            first: start.first,\n            last: start.last,\n        };\n        const seq: List<Expr> = [];\n        seq[sourceReference] = ref;\n\n        const expectBracket = start.t === \"{\";\n        let tok: IteratorResult<Token> | null = start.t === \"{\" ? null : { value: start };\n\n        for (; ;) {\n            if (tok === null) {\n                tok = scanner.next();\n                if (!tok.done) {\n                    ref.last = tok.value.last;\n                }\n            }\n            if (tok.done) {\n                if (expectBracket) {\n                    throw errEOF;\n                } else {\n                    return seq;\n                }\n            }\n\n            if (tok.value.t === \"}\") {\n                if (!expectBracket) {\n                    throw new MichelineParseError(tok.value, `unexpected closing bracket`);\n                } else {\n                    return seq;\n                }\n            } else if (tok.value.t === Literal.Ident) {\n                // Identifier with arguments\n                const [itm, n] = this.parseArgs(scanner, tok.value);\n                ref.last = itm[sourceReference]?.last || ref.last;\n                seq.push(this.expand(itm));\n                tok = n;\n            } else {\n                // Other\n                const ex = this.parseExpr(scanner, tok.value);\n                ref.last = ex[sourceReference]?.last || ref.last;\n                seq.push(ex);\n                tok = null;\n            }\n\n            if (tok === null) {\n                tok = scanner.next();\n                if (!tok.done) {\n                    ref.last = tok.value.last;\n                }\n            }\n            if (!tok.done && tok.value.t === \";\") {\n                tok = null;\n            }\n        }\n    }\n\n    private parseExpr(scanner: Iterator<Token>, tok: Token): Expr {\n        switch (tok.t) {\n            case Literal.Ident:\n                return this.expand({ prim: tok.v, [sourceReference]: { first: tok.first, last: tok.last } });\n\n            case Literal.Number:\n                return { int: tok.v, [sourceReference]: { first: tok.first, last: tok.last } };\n\n            case Literal.String:\n                return { string: JSON.parse(tok.v) as string, [sourceReference]: { first: tok.first, last: tok.last } };\n\n            case Literal.Bytes:\n                return { bytes: tok.v.slice(2), [sourceReference]: { first: tok.first, last: tok.last } };\n\n            case '(':\n                return this.parseList(scanner, tok);\n\n            case '{':\n                return this.parseSequence(scanner, tok);\n\n            default:\n                throw new MichelineParseError(tok, `unexpected token: ${tok.v}`);\n        }\n    }\n\n    /**\n     * Parses a Micheline sequence expression, such as smart contract source. Enclosing curly brackets may be omitted.\n     * @param src A Micheline sequence `{parameter ...; storage int; code { DUP ; ...};}` or `parameter ...; storage int; code { DUP ; ...};`\n     */\n    parseScript(src: string): Expr[] | null {\n        // tslint:disable-next-line: strict-type-predicates\n        if (typeof src !== \"string\") {\n            throw new TypeError(`string type was expected, got ${typeof src} instead`);\n        }\n\n        const scanner = scan(src);\n        const tok = scanner.next();\n        if (tok.done) {\n            return null;\n        }\n        return this.parseSequence(scanner, tok.value);\n    }\n\n    /**\n     * Parse any Michelson expression\n     * @param src A Michelson expression such as `(Pair {Elt \"0\" 0} 0)` or `{parameter ...; storage int; code { DUP ; ...};}`\n     * @returns An AST node or null for empty document.\n     */\n    parseMichelineExpression(src: string): Expr | null {\n        // tslint:disable-next-line: strict-type-predicates\n        if (typeof src !== \"string\") {\n            throw new TypeError(`string type was expected, got ${typeof src} instead`);\n        }\n\n        const scanner = scan(src);\n        const tok = scanner.next();\n        if (tok.done) {\n            return null;\n        }\n        return this.parseExpr(scanner, tok.value);\n    }\n\n    /**\n     * Takes a JSON-encoded Michelson, validates it, strips away unneeded properties and optionally expands macros (See {@link ParserOptions}).\n     * @param src An object containing JSON-encoded Michelson, usually returned by `JSON.parse()`\n     */\n    parseJSON(src: object): Expr {\n        // tslint:disable-next-line: strict-type-predicates\n        if (typeof src !== \"object\") {\n            throw new TypeError(`object type was expected, got ${typeof src} instead`);\n        }\n\n        if (Array.isArray(src)) {\n            const ret: Expr[] = [];\n            for (const n of src) {\n                if (n === null || typeof n !== 'object') {\n                    throw new JSONParseError(n, `unexpected sequence element: ${n}`);\n                }\n                ret.push(this.parseJSON(n));\n            }\n            return ret;\n\n        } else if ('prim' in src) {\n            const p = src as { prim: any, annots?: any[], args?: any[] };\n            if (\n                typeof p.prim === 'string' &&\n                (p.annots === undefined || Array.isArray(p.annots)) &&\n                (p.args === undefined || Array.isArray(p.args))\n            ) {\n                const ret: Prim = {\n                    prim: p.prim,\n                };\n\n                if (p.annots !== undefined) {\n                    for (const a of p.annots) {\n                        if (typeof a !== 'string') {\n                            throw new JSONParseError(a, `string expected: ${a}`);\n                        }\n                    }\n                    ret.annots = p.annots;\n                }\n\n                if (p.args !== undefined) {\n                    ret.args = [];\n                    for (const a of p.args) {\n                        if (a === null || typeof a !== 'object') {\n                            throw new JSONParseError(a, `unexpected argument: ${a}`);\n                        }\n                        ret.args.push(this.parseJSON(a));\n                    }\n                }\n\n                return this.expand(ret);\n            }\n\n            throw new JSONParseError(src, `malformed prim expression: ${src}`);\n        } else if ('string' in src) {\n            if (typeof (src as any).string === 'string') {\n                return { string: (src as StringLiteral).string };\n            }\n\n            throw new JSONParseError(src, `malformed string literal: ${src}`);\n        } else if ('int' in src) {\n            if (typeof (src as any).int === 'string' && intRe.test((src as IntLiteral).int)) {\n                return { int: (src as IntLiteral).int };\n            }\n\n            throw new JSONParseError(src, `malformed int literal: ${src}`);\n        } else if ('bytes' in src) {\n            if (\n                typeof (src as any).bytes === 'string' &&\n                bytesRe.test((src as BytesLiteral).bytes)\n            ) {\n                return { bytes: (src as BytesLiteral).bytes };\n            }\n\n            throw new JSONParseError(src, `malformed bytes literal: ${src}`);\n        } else {\n            throw new JSONParseError(src, `unexpected object: ${src}`);\n        }\n    }\n}\n","import { Expr, Prim, sourceReference } from \"./micheline\";\n\nexport interface FormatOptions {\n    /**\n     * A string used for code indentation if desired. Usually a tab character or a number of spaces.\n     */\n    indent?: string;\n    /**\n     * A string used for line separation. Usually a newline character (\"\\n\");\n     */\n    newline?: string;\n}\n\nclass Formatter {\n    constructor(private opt?: FormatOptions, private lev: number = 0) {\n    }\n\n    indent(n = 0): string {\n        let ret = \"\";\n        if (this.opt?.indent !== undefined) {\n            for (let i = this.lev + n; i > 0; i--) {\n                ret += this.opt.indent;\n            }\n        }\n        return ret;\n    }\n\n    get lf(): string {\n        return this.opt?.newline || \"\";\n    }\n\n    get lfsp(): string {\n        return this.opt?.newline || \" \";\n    }\n\n    down(n: number): Formatter {\n        return new Formatter(this.opt, this.lev + n);\n    }\n}\n\nfunction hasArgs(node: Expr): node is Prim {\n    return (\"prim\" in node) &&\n        ((node.annots !== undefined && node.annots.length !== 0) ||\n            (node.args !== undefined && node.args.length !== 0));\n}\n\nfunction isMultiline(node: Prim): boolean {\n    if (node.args !== undefined) {\n        for (const a of node.args) {\n            if (Array.isArray(a) || hasArgs(a)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction emitExpr(node: Expr, f: Formatter, foldMacros: boolean): string {\n    const macro = node[sourceReference]?.macro;\n    if (foldMacros && macro) {\n        return emitExpr(macro, f, foldMacros);\n    }\n\n    if (Array.isArray(node)) {\n        return emitSeq(node, f, foldMacros);\n\n    } else if (\"string\" in node) {\n        return JSON.stringify(node.string);\n\n    } else if (\"int\" in node) {\n        return node.int;\n\n    } else if (\"bytes\" in node) {\n        return \"0x\" + node.bytes;\n\n    } else {\n        if ((node.annots === undefined || node.annots.length === 0) &&\n            (node.args === undefined || node.args.length === 0)) {\n            return node.prim;\n        }\n\n        let ret = \"(\" + node.prim;\n        if (node.annots !== undefined) {\n            for (const a of node.annots) {\n                ret += \" \" + a;\n            }\n        }\n        if (node.args !== undefined) {\n            const multiline = isMultiline(node);\n            for (const a of node.args) {\n                if (multiline) {\n                    ret += f.lfsp + f.indent(1) + emitExpr(a, f.down(1), foldMacros);\n                } else {\n                    ret += \" \" + emitExpr(a, f, foldMacros);\n                }\n            }\n        }\n        return ret + \")\";\n    }\n}\n\nfunction emitSeq(node: Expr[], f: Formatter, foldMacros: boolean): string {\n    let ret = \"{\" + f.lf;\n    let i = node.length;\n    for (const el of node) {\n        ret += f.indent(1);\n\n        if (\"prim\" in el) {\n            ret += el.prim;\n\n            if (el.annots !== undefined) {\n                for (const a of el.annots) {\n                    ret += \" \" + a;\n                }\n            }\n            if (el.args !== undefined) {\n                const multiline = isMultiline(el);\n                for (const a of el.args) {\n                    if (multiline) {\n                        ret += f.lfsp + f.indent(2) + emitExpr(a, f.down(2), foldMacros);\n                    } else {\n                        ret += \" \" + emitExpr(a, f, foldMacros);\n                    }\n                }\n            }\n        } else {\n            ret += emitExpr(el, f.down(1), foldMacros);\n        }\n\n        ret += (i > 1 ? \";\" + f.lfsp : f.lf);\n        i--;\n    }\n    return ret + f.indent() + \"}\";\n}\n\n/**\n * Formats Micheline expression\n * @param expr An AST node\n * @param opt Options\n */\nexport function emitMicheline(expr: Expr, opt?: FormatOptions, foldMacros = false): string {\n    // tslint:disable-next-line: strict-type-predicates\n    if (typeof expr !== \"object\") {\n        throw new TypeError(`object type was expected, got ${typeof expr} instead`);\n    }\n\n    return emitExpr(expr, new Formatter(opt), foldMacros);\n}","const H = [\n    0x6a09e667 | 0,\n    0xbb67ae85 | 0,\n    0x3c6ef372 | 0,\n    0xa54ff53a | 0,\n    0x510e527f | 0,\n    0x9b05688c | 0,\n    0x1f83d9ab | 0,\n    0x5be0cd19 | 0\n];\n\nconst K = [\n    0x428a2f98 | 0, 0x71374491 | 0, 0xb5c0fbcf | 0, 0xe9b5dba5 | 0, 0x3956c25b | 0, 0x59f111f1 | 0, 0x923f82a4 | 0, 0xab1c5ed5 | 0,\n    0xd807aa98 | 0, 0x12835b01 | 0, 0x243185be | 0, 0x550c7dc3 | 0, 0x72be5d74 | 0, 0x80deb1fe | 0, 0x9bdc06a7 | 0, 0xc19bf174 | 0,\n    0xe49b69c1 | 0, 0xefbe4786 | 0, 0x0fc19dc6 | 0, 0x240ca1cc | 0, 0x2de92c6f | 0, 0x4a7484aa | 0, 0x5cb0a9dc | 0, 0x76f988da | 0,\n    0x983e5152 | 0, 0xa831c66d | 0, 0xb00327c8 | 0, 0xbf597fc7 | 0, 0xc6e00bf3 | 0, 0xd5a79147 | 0, 0x06ca6351 | 0, 0x14292967 | 0,\n    0x27b70a85 | 0, 0x2e1b2138 | 0, 0x4d2c6dfc | 0, 0x53380d13 | 0, 0x650a7354 | 0, 0x766a0abb | 0, 0x81c2c92e | 0, 0x92722c85 | 0,\n    0xa2bfe8a1 | 0, 0xa81a664b | 0, 0xc24b8b70 | 0, 0xc76c51a3 | 0, 0xd192e819 | 0, 0xd6990624 | 0, 0xf40e3585 | 0, 0x106aa070 | 0,\n    0x19a4c116 | 0, 0x1e376c08 | 0, 0x2748774c | 0, 0x34b0bcb5 | 0, 0x391c0cb3 | 0, 0x4ed8aa4a | 0, 0x5b9cca4f | 0, 0x682e6ff3 | 0,\n    0x748f82ee | 0, 0x78a5636f | 0, 0x84c87814 | 0, 0x8cc70208 | 0, 0x90befffa | 0, 0xa4506ceb | 0, 0xbef9a3f7 | 0, 0xc67178f2 | 0\n];\n\n// https://tools.ietf.org/html/rfc6234\nfunction sha256(msg: number[] | Uint8Array): number[] {\n    // pad the message\n    const r = (msg.length + 9) % 64;\n    const pad = r === 0 ? 0 : 64 - r;\n\n    if (msg.length > 268435455) {\n        throw new Error(`sha256: message length is too big: ${msg.length}`);\n    }\n\n    const l = msg.length << 3;\n    const buffer = [\n        ...msg,\n        0x80,\n        ...(new Array<number>(pad).fill(0)),\n        0, 0, 0, 0, (l >> 24) & 0xff, (l >> 16) & 0xff, (l >> 8) & 0xff, l & 0xff,\n    ];\n\n    function ror(x: number, n: number): number {\n        return (x >>> n) | (x << (32 - n));\n    }\n\n    const h = [...H];\n    const w = new Array<number>(64);\n    const v = new Array<number>(8);\n\n    for (let offset = 0; offset < buffer.length; offset += 64) {\n        let q = offset;\n        let i = 0;\n        while (i < 16) {\n            w[i] = (buffer[q] << 24) | (buffer[q + 1] << 16) | (buffer[q + 2] << 8) | buffer[q + 3];\n            q += 4;\n            i++;\n        }\n        while (i < 64) {\n            const s0 = ror(w[i - 15], 7) ^ ror(w[i - 15], 18) ^ (w[i - 15] >>> 3);\n            const s1 = ror(w[i - 2], 17) ^ ror(w[i - 2], 19) ^ (w[i - 2] >>> 10);\n            w[i] = ((s1 | 0) + w[i - 7] + s0 + w[i - 16]) | 0;\n            i++;\n        }\n\n        for (let i = 0; i < 8; i++) {\n            v[i] = h[i];\n        }\n\n        for (let i = 0; i < 64; i++) {\n            const b0 = ror(v[0], 2) ^ ror(v[0], 13) ^ ror(v[0], 22);\n            const b1 = ror(v[4], 6) ^ ror(v[4], 11) ^ ror(v[4], 25);\n            const t1 = (v[7] + b1 + ((v[4] & v[5]) ^ ((~v[4]) & v[6])) + K[i] + w[i]) | 0;\n            const t2 = (b0 + (((v[0] & v[1]) ^ (v[0] & v[2]) ^ (v[1] & v[2])))) | 0;\n\n            v[7] = v[6];\n            v[6] = v[5];\n            v[5] = v[4];\n            v[4] = (v[3] + t1) | 0;\n            v[3] = v[2];\n            v[2] = v[1];\n            v[1] = v[0];\n            v[0] = (t1 + t2) | 0;\n        }\n\n        for (let i = 0; i < 8; i++) {\n            h[i] = (h[i] + v[i]) | 0;\n        }\n    }\n\n    const digest: number[] = [];\n    for (const v of h) {\n        digest.push((v >> 24) & 0xff);\n        digest.push((v >> 16) & 0xff);\n        digest.push((v >> 8) & 0xff);\n        digest.push(v & 0xff);\n    }\n\n    return digest;\n}\n\nconst base58alphabet: number[] = [0, 1, 2, 3, 4, 5, 6,\n    7, 8, 255, 255, 255, 255, 255, 255,\n    255, 9, 10, 11, 12, 13, 14, 15,\n    16, 255, 17, 18, 19, 20, 21, 255,\n    22, 23, 24, 25, 26, 27, 28, 29,\n    30, 31, 32, 255, 255, 255, 255, 255,\n    255, 33, 34, 35, 36, 37, 38, 39,\n    40, 41, 42, 43, 255, 44, 45, 46,\n    47, 48, 49, 50, 51, 52, 53, 54,\n    55, 56, 57\n];\n\nfunction byteAt(src: string, i: number): number {\n    const c = src.charCodeAt(i) - 49;\n    if (c >= base58alphabet.length || base58alphabet[c] === 255) {\n        throw new Error(`Base58 decoding error: unexpected character at position ${i}: ${src[i]}`);\n    }\n    return base58alphabet[c];\n}\n\nexport function decodeBase58(src: string): number[] {\n    const acc: number[] = [];\n    let i = 0;\n    // count and skip leading zeros\n    while (i < src.length && byteAt(src, i) === 0) { i++; }\n    let zeros = i;\n    while (i < src.length) {\n        let carry = byteAt(src, i++);\n        /*\n        for every symbol x\n        acc = acc * 58 + x\n        where acc is a little endian arbitrary length integer\n        */\n        let ii = 0;\n        while (carry !== 0 || ii < acc.length) {\n            const m = (acc[ii] || 0) * 58 + carry;\n            acc[ii++] = m % 256;\n            carry = Math.floor(m / 256);\n        }\n    }\n    while (zeros-- > 0) {\n        acc.push(0);\n    }\n    return acc.reverse();\n}\n\nexport function decodeBase58Check(src: string): number[] {\n    const buffer = decodeBase58(src);\n    if (buffer.length < 4) {\n        throw new Error(`Base58Check decoding error: data is too short ${buffer.length}`);\n    }\n\n    const data = buffer.slice(0, buffer.length - 4);\n    const sum = buffer.slice(buffer.length - 4);\n    const computed = sha256(sha256(data));\n    if (sum[0] !== computed[0] ||\n        sum[1] !== computed[1] ||\n        sum[2] !== computed[2] ||\n        sum[3] !== computed[3]) {\n        throw new Error(\"Base58Check decoding error: invalid checksum\");\n    }\n\n    return data;\n}","import { Prim, Expr } from \"./micheline\";\nimport { decodeBase58Check } from \"./base58\";\n\nexport type Tuple<N extends number, T> = N extends 1 ? [T] :\n    N extends 2 ? [T, T] :\n    N extends 3 ? [T, T, T] :\n    N extends 4 ? [T, T, T, T] :\n    never;\n\ntype RequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\ntype OmitProp<T, K extends keyof T> = Omit<T, K> & { [P in K]?: never };\n\nexport type ReqArgs<T extends Prim> = RequiredProp<T, \"args\">;\nexport type NoArgs<T extends Prim> = OmitProp<T, \"args\">;\nexport type NoAnnots<T extends Prim> = OmitProp<T, \"annots\">;\n\nexport type Nullable<T> = { [P in keyof T]: T[P] | null };\n\nexport class MichelsonError<T extends Expr = Expr> extends Error {\n    /**\n     * @param val Value of a AST node caused the error\n     * @param path Path to a node caused the error\n     * @param message An error message\n     */\n    constructor(public val: T, message?: string) {\n        super(message);\n        Object.setPrototypeOf(this, MichelsonError.prototype);\n    }\n}\n\nexport function isMichelsonError<T extends Expr = Expr>(err: any): err is MichelsonError<T> {\n    return err instanceof MichelsonError;\n}\n\n// Ad hoc big integer parser\nexport class LongInteger {\n    private neg = false;\n    private buf: number[] = [];\n\n    private append(c: number) {\n        let i = 0;\n        while (c !== 0 || i < this.buf.length) {\n            const m = (this.buf[i] || 0) * 10 + c;\n            this.buf[i++] = m % 256;\n            c = Math.floor(m / 256);\n        }\n    }\n\n    constructor(arg?: string | number) {\n        if (arg === undefined) {\n            return;\n        }\n        if (typeof arg === \"string\") {\n            for (let i = 0; i < arg.length; i++) {\n                let c = arg.charCodeAt(i);\n                if (i === 0 && c === 0x2d) {\n                    this.neg = true;\n                } else {\n                    if (c < 0x30 || c > 0x39) {\n                        throw new Error(`unexpected character in integer constant: ${arg[i]}`);\n                    }\n                    this.append(c - 0x30);\n                }\n            }\n        } else if (arg < 0) {\n            this.neg = true;\n            this.append(-arg);\n        } else {\n            this.append(arg);\n        }\n    }\n\n    cmp(arg: LongInteger): number {\n        if (this.neg !== arg.neg) {\n            return (arg.neg ? 1 : 0) - (this.neg ? 1 : 0);\n        } else {\n            let ret = 0;\n            if (this.buf.length !== arg.buf.length) {\n                ret = this.buf.length < arg.buf.length ? -1 : 1;\n            } else if (this.buf.length !== 0) {\n                let i = arg.buf.length - 1;\n                while (i >= 0 && this.buf[i] === arg.buf[i]) {\n                    i--;\n                }\n                ret = i < 0 ? 0 : this.buf[i] < arg.buf[i] ? -1 : 1;\n            }\n            return !this.neg ? ret : ret === 0 ? 0 : -ret;\n        }\n    }\n\n    get sign(): number {\n        return this.buf.length === 0 ? 0 : this.neg ? -1 : 1;\n    }\n}\n\nexport function parseBytes(s: string): number[] | null {\n    const ret: number[] = [];\n    for (let i = 0; i < s.length; i += 2) {\n        const x = parseInt(s.slice(i, i + 2), 16);\n        if (Number.isNaN(x)) {\n            return null;\n        }\n        ret.push(x);\n    }\n    return ret;\n}\n\nexport function compareBytes(a: number[] | Uint8Array, b: number[] | Uint8Array): number {\n    if (a.length !== b.length) {\n        return a.length < b.length ? -1 : 1;\n    } else if (a.length !== 0) {\n        let i = 0;\n        while (i < a.length && a[i] === b[i]) {\n            i++;\n        }\n        return i === a.length ? 0 : a[i] < b[i] ? -1 : 1;\n    } else {\n        return 0;\n    }\n}\n\nexport function isDecimal(x: string): boolean {\n    try {\n        // tslint:disable-next-line: no-unused-expression\n        new LongInteger(x);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nexport function isNatural(x: string): boolean {\n    try {\n        return new LongInteger(x).sign >= 0;\n    } catch {\n        return false;\n    }\n}\n\nexport interface UnpackedAnnotations {\n    f?: string[];\n    t?: string[];\n    v?: string[];\n}\n\nexport interface UnpackAnnotationsOptions {\n    specialVar?: boolean; // CAR, CDR\n    emptyVar?: boolean;\n    specialFields?: boolean; // PAIR, LEFT, RIGHT\n    emptyFields?: boolean;\n}\n\nconst annRe = /^(@%|@%%|%@|[@:%]([_0-9a-zA-Z][_0-9a-zA-Z\\.%@]*)?)$/;\n\nexport function unpackAnnotations(p: Prim, opt?: UnpackAnnotationsOptions): UnpackedAnnotations {\n    let field: string[] | undefined;\n    let type: string[] | undefined;\n    let vars: string[] | undefined;\n\n    if (p.annots !== undefined) {\n        for (const v of p.annots) {\n            if (v.length !== 0) {\n                if (!annRe.test(v) ||\n                    (!opt?.specialVar && (v === \"@%\" || v === \"@%%\")) ||\n                    (!opt?.specialFields && v === \"%@\")) {\n                    throw new MichelsonError(p, `${p.prim}: unexpected annotation: ${v}`);\n                }\n\n                switch (v[0]) {\n                    case \"%\":\n                        if (opt?.emptyFields || v.length > 1) {\n                            field = field || [];\n                            field.push(v);\n                        }\n                        break;\n                    case \":\":\n                        if (v.length > 1) {\n                            type = type || [];\n                            type.push(v);\n                        }\n                        break;\n                    case \"@\":\n                        if (opt?.emptyVar || v.length > 1) {\n                            vars = vars || [];\n                            vars.push(v);\n                        }\n                        break;\n                }\n            }\n        }\n    }\n    return { f: field, t: type, v: vars };\n}\n\nexport type TezosIDType = \"BlockHash\" | \"OperationHash\" | \"OperationListHash\" | \"OperationListListHash\" |\n    \"ProtocolHash\" | \"ContextHash\" | \"ED25519PublicKeyHash\" | \"SECP256K1PublicKeyHash\" |\n    \"P256PublicKeyHash\" | \"ContractHash\" | \"CryptoboxPublicKeyHash\" | \"ED25519Seed\" |\n    \"ED25519PublicKey\" | \"SECP256K1SecretKey\" | \"P256SecretKey\" | \"ED25519EncryptedSeed\" |\n    \"SECP256K1EncryptedSecretKey\" | \"P256EncryptedSecretKey\" | \"SECP256K1PublicKey\" |\n    \"P256PublicKey\" | \"SECP256K1Scalar\" | \"SECP256K1Element\" | \"ED25519SecretKey\" |\n    \"ED25519Signature\" | \"SECP256K1Signature\" | \"P256Signature\" | \"GenericSignature\" | \"ChainID\";\n\nexport type TezosIDPrefix = [number, number[]]; // payload length, prefix\n\nexport const tezosPrefix: Record<TezosIDType, TezosIDPrefix> = {\n    BlockHash: [32, [1, 52]], // B(51)\n    OperationHash: [32, [5, 116]], // o(51)\n    OperationListHash: [32, [133, 233]], // Lo(52)\n    OperationListListHash: [32, [29, 159, 109]], // LLo(53)\n    ProtocolHash: [32, [2, 170]], // P(51)\n    ContextHash: [32, [79, 199]], // Co(52)\n    ED25519PublicKeyHash: [20, [6, 161, 159]], // tz1(36)\n    SECP256K1PublicKeyHash: [20, [6, 161, 161]], // tz2(36)\n    P256PublicKeyHash: [20, [6, 161, 164]], // tz3(36)\n    ContractHash: [20, [2, 90, 121]], // KT1(36)\n    CryptoboxPublicKeyHash: [16, [153, 103]], // id(30)\n    ED25519Seed: [32, [13, 15, 58, 7]], // edsk(54)\n    ED25519PublicKey: [32, [13, 15, 37, 217]], // edpk(54)\n    SECP256K1SecretKey: [32, [17, 162, 224, 201]], // spsk(54)\n    P256SecretKey: [32, [16, 81, 238, 189]], // p2sk(54)\n    ED25519EncryptedSeed: [56, [7, 90, 60, 179, 41]], // edesk(88)\n    SECP256K1EncryptedSecretKey: [56, [9, 237, 241, 174, 150]], // spesk(88)\n    P256EncryptedSecretKey: [56, [9, 48, 57, 115, 171]], // p2esk(88)\n    SECP256K1PublicKey: [33, [3, 254, 226, 86]], // sppk(55)\n    P256PublicKey: [33, [3, 178, 139, 127]], // p2pk(55)\n    SECP256K1Scalar: [33, [38, 248, 136]], // SSp(53)\n    SECP256K1Element: [33, [5, 92, 0]], // GSp(54)\n    ED25519SecretKey: [64, [43, 246, 78, 7]], // edsk(98)\n    ED25519Signature: [64, [9, 245, 205, 134, 18]], // edsig(99)\n    SECP256K1Signature: [64, [13, 115, 101, 19, 63]], // spsig1(99)\n    P256Signature: [64, [54, 240, 44, 52]], // p2sig(98)\n    GenericSignature: [64, [4, 130, 43]], // sig(96)\n    ChainID: [4, [87, 82, 0]],\n};\n\nexport function checkTezosID(id: string | number[], ...types: TezosIDType[]): [TezosIDType, number[]] | null {\n    const buf = Array.isArray(id) ? id : decodeBase58Check(id);\n    for (const t of types) {\n        const prefix = tezosPrefix[t];\n        if (buf.length === prefix[0] + prefix[1].length) {\n            let i = 0;\n            while (i < prefix[1].length && buf[i] === prefix[1][i]) {\n                i++;\n            }\n            if (i === prefix[1].length) {\n                return [t, buf.slice(prefix[1].length)];\n            }\n        }\n    }\n    return null;\n}\n","import { Prim, Expr, IntLiteral } from \"./micheline\";\nimport { Tuple, NoArgs, ReqArgs, MichelsonError } from \"./utils\";\nimport {\n   MichelsonCode, MichelsonType, MichelsonComparableType, MichelsonSimpleComparableType,\n   MichelsonData, MichelsonContract, MichelsonNoArgInstruction, MichelsonInstruction,\n   MichelsonSerializableType, MichelsonPushableType, MichelsonStorableType, MichelsonPassableType\n} from \"./michelson-types\";\n\n// Michelson validator\n\nconst noArgInstructionIDs: Record<MichelsonNoArgInstruction[\"prim\"], true> = {\n   \"DUP\": true, \"SWAP\": true, \"SOME\": true, \"UNIT\": true, \"PAIR\": true, \"CAR\": true, \"CDR\": true,\n   \"CONS\": true, \"SIZE\": true, \"MEM\": true, \"GET\": true, \"UPDATE\": true, \"EXEC\": true, \"APPLY\": true, \"FAILWITH\": true, \"RENAME\": true, \"CONCAT\": true, \"SLICE\": true,\n   \"PACK\": true, \"ADD\": true, \"SUB\": true, \"MUL\": true, \"EDIV\": true, \"ABS\": true, \"ISNAT\": true, \"INT\": true, \"NEG\": true, \"LSL\": true, \"LSR\": true, \"OR\": true,\n   \"AND\": true, \"XOR\": true, \"NOT\": true, \"COMPARE\": true, \"EQ\": true, \"NEQ\": true, \"LT\": true, \"GT\": true, \"LE\": true, \"GE\": true, \"SELF\": true,\n   \"TRANSFER_TOKENS\": true, \"SET_DELEGATE\": true, \"CREATE_ACCOUNT\": true, \"IMPLICIT_ACCOUNT\": true, \"NOW\": true, \"AMOUNT\": true,\n   \"BALANCE\": true, \"CHECK_SIGNATURE\": true, \"BLAKE2B\": true, \"SHA256\": true, \"SHA512\": true, \"HASH_KEY\": true, \"STEPS_TO_QUOTA\": true,\n   \"SOURCE\": true, \"SENDER\": true, \"ADDRESS\": true, \"CHAIN_ID\": true,\n};\n\nexport const instructionIDs: Record<MichelsonInstruction[\"prim\"], true> = Object.assign({}, noArgInstructionIDs, {\n   \"DROP\": true, \"DIG\": true, \"DUG\": true, \"NONE\": true, \"LEFT\": true, \"RIGHT\": true, \"NIL\": true, \"UNPACK\": true, \"CONTRACT\": true, \"CAST\": true,\n   \"IF_NONE\": true, \"IF_LEFT\": true, \"IF_CONS\": true, \"IF\": true, \"MAP\": true, \"ITER\": true, \"LOOP\": true, \"LOOP_LEFT\": true, \"DIP\": true,\n   \"CREATE_CONTRACT\": true, \"PUSH\": true, \"EMPTY_SET\": true, \"EMPTY_MAP\": true, \"EMPTY_BIG_MAP\": true, \"LAMBDA\": true,\n} as const);\n\nconst simpleComparableTypeIDs: Record<MichelsonSimpleComparableType[\"prim\"], true> = {\n   \"int\": true, \"nat\": true, \"string\": true, \"bytes\": true, \"mutez\": true,\n   \"bool\": true, \"key_hash\": true, \"timestamp\": true, \"address\": true,\n};\n\nconst typeIDs: Record<MichelsonType[\"prim\"], true> = {\n   \"address\": true, \"big_map\": true, \"bool\": true, \"bytes\": true, \"chain_id\": true, \"contract\": true, \"int\": true,\n   \"key_hash\": true, \"key\": true, \"lambda\": true, \"list\": true, \"map\": true, \"mutez\": true, \"nat\": true, \"operation\": true, \"option\": true,\n   \"or\": true, \"pair\": true, \"set\": true, \"signature\": true, \"string\": true, \"timestamp\": true, \"unit\": true,\n};\n\nexport class MichelsonValidationError extends MichelsonError {\n   /**\n    * @param val Value of a node caused the error\n    * @param message An error message\n    */\n   constructor(public val: Expr, message?: string) {\n      super(val, message);\n      Object.setPrototypeOf(this, MichelsonValidationError.prototype);\n   }\n}\n\nfunction isPrim(ex: Expr): ex is Prim {\n   return \"prim\" in ex;\n}\n\nfunction assertPrim(ex: Expr): ex is Prim {\n   if (isPrim(ex)) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, \"prim expression expected\");\n}\n\nfunction assertSeq(ex: Expr): ex is Expr[] {\n   if (Array.isArray(ex)) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, \"sequence expression expected\");\n}\n\nfunction assertNatural(i: IntLiteral) {\n   if (i.int[0] === \"-\") {\n      throw new MichelsonValidationError(i, \"natural number expected\");\n   }\n}\n\nfunction assertIntLiteral(ex: Expr): ex is IntLiteral {\n   if (\"int\" in ex) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, \"int literal expected\");\n}\n\nfunction assertArgs<N extends number>(ex: Prim, n: N):\n   ex is N extends 0 ?\n   NoArgs<Prim<string>> :\n   ReqArgs<Prim<string, Tuple<N, Expr>>> {\n   if ((n === 0 && ex.args === undefined) || ex.args?.length === n) {\n      return true;\n   }\n   throw new MichelsonValidationError(ex, `${n} arguments expected`);\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonInstruction(ex: Expr): ex is MichelsonCode {\n   if (Array.isArray(ex)) {\n      for (const n of ex) {\n         if (!Array.isArray(n) && !isPrim(n)) {\n            throw new MichelsonValidationError(ex, \"sequence or prim expected\");\n         }\n         assertMichelsonInstruction(n);\n      }\n      return true;\n   }\n\n   if (assertPrim(ex)) {\n      if (Object.prototype.hasOwnProperty.call(noArgInstructionIDs, ex.prim)) {\n         assertArgs(ex, 0);\n         return true;\n      }\n\n      switch (ex.prim) {\n         case \"DROP\":\n            if (ex.args !== undefined && assertArgs(ex, 1)) {\n               /* istanbul ignore else */\n               if (assertIntLiteral(ex.args[0])) {\n                  assertNatural(ex.args[0]);\n               }\n            }\n            break;\n\n         case \"DIG\":\n         case \"DUG\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               /* istanbul ignore else */\n               if (assertIntLiteral(ex.args[0])) {\n                  assertNatural(ex.args[0]);\n               }\n            }\n            break;\n\n         case \"NONE\":\n         case \"LEFT\":\n         case \"RIGHT\":\n         case \"NIL\":\n         case \"CAST\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonType(ex.args[0]);\n            }\n            break;\n\n         case \"UNPACK\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonSerializableType(ex.args[0]);\n            }\n            break;\n\n         case \"CONTRACT\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonPassableType(ex.args[0]);\n            }\n            break;\n\n         case \"IF_NONE\":\n         case \"IF_LEFT\":\n         case \"IF_CONS\":\n         case \"IF\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[0])) {\n                  assertMichelsonInstruction(ex.args[0]);\n               }\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[1])) {\n                  assertMichelsonInstruction(ex.args[1]);\n               }\n            }\n            break;\n\n         case \"MAP\":\n         case \"ITER\":\n         case \"LOOP\":\n         case \"LOOP_LEFT\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonInstruction(ex.args[0]);\n            }\n            break;\n\n         case \"CREATE_CONTRACT\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonContract(ex.args[0]);\n            }\n            break;\n\n         case \"DIP\":\n            if (ex.args?.length === 2) {\n               /* istanbul ignore else */\n               if (assertIntLiteral(ex.args[0])) {\n                  assertNatural(ex.args[0]);\n               }\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[1])) {\n                  assertMichelsonInstruction(ex.args[1]);\n               }\n            } else if (ex.args?.length === 1) {\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[0])) {\n                  assertMichelsonInstruction(ex.args[0]);\n               }\n            } else {\n               throw new MichelsonValidationError(ex, \"1 or 2 arguments expected\");\n            }\n            break;\n\n         case \"PUSH\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               assertMichelsonPushableType(ex.args[0]);\n               assertMichelsonData(ex.args[1]);\n            }\n            break;\n\n         case \"EMPTY_SET\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonComparableType(ex.args[0]);\n            }\n            break;\n\n         case \"EMPTY_MAP\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               assertMichelsonComparableType(ex.args[0]);\n               assertMichelsonType(ex.args[1]);\n            }\n            break;\n\n         case \"EMPTY_BIG_MAP\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               assertMichelsonComparableType(ex.args[0]);\n               assertMichelsonSerializableType(ex.args[1]);\n            }\n            break;\n\n         case \"LAMBDA\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 3)) {\n               assertMichelsonType(ex.args[0]);\n               assertMichelsonType(ex.args[1]);\n               /* istanbul ignore else */\n               if (assertSeq(ex.args[2])) {\n                  assertMichelsonInstruction(ex.args[2]);\n               }\n            }\n            break;\n\n         default:\n            throw new MichelsonValidationError(ex, \"instruction expected\");\n      }\n   }\n   return true;\n}\n\nexport function assertMichelsonComparableType(ex: Expr): ex is MichelsonComparableType {\n   /* istanbul ignore else */\n   if (assertPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(simpleComparableTypeIDs, ex.prim) && ex.prim !== \"pair\") {\n         throw new MichelsonValidationError(ex, `${ex.prim}: type is not comparable`);\n      }\n      traverseType(ex,\n         (ex) => {\n            if (!Object.prototype.hasOwnProperty.call(simpleComparableTypeIDs, ex.prim)) {\n               throw new MichelsonValidationError(ex, `${ex.prim}: type is not comparable`);\n            }\n            assertArgs(ex, 0);\n         },\n         (ex) => assertMichelsonComparableType(ex));\n   }\n   return true;\n}\n\nexport function assertMichelsonSerializableType(ex: Expr): ex is MichelsonSerializableType {\n   /* istanbul ignore else */\n   if (assertPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n         ex.prim === \"big_map\" ||\n         ex.prim === \"operation\") {\n         throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used inside big_map or PACK/UNPACK instructions`);\n      }\n      traverseType(ex,\n         (ex) => assertMichelsonSerializableType(ex),\n         (ex) => assertMichelsonSerializableType(ex));\n   }\n   return true;\n}\n\nexport function assertMichelsonPushableType(ex: Expr): ex is MichelsonPushableType {\n   /* istanbul ignore else */\n   if (assertPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n         ex.prim === \"big_map\" ||\n         ex.prim === \"operation\" ||\n         ex.prim === \"contract\") {\n         throw new MichelsonValidationError(ex, `${ex.prim}: type can't be pushed`);\n      }\n      traverseType(ex,\n         (ex) => assertMichelsonPushableType(ex),\n         (ex) => assertMichelsonPushableType(ex));\n   }\n   return true;\n}\n\nexport function assertMichelsonStorableType(ex: Expr): ex is MichelsonStorableType {\n   /* istanbul ignore else */\n   if (assertPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n         ex.prim === \"operation\" ||\n         ex.prim === \"contract\") {\n         throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used as part of a storage`);\n      }\n      traverseType(ex,\n         (ex) => assertMichelsonStorableType(ex),\n         (ex) => assertMichelsonStorableType(ex));\n   }\n   return true;\n}\n\nexport function assertMichelsonPassableType(ex: Expr): ex is MichelsonPassableType {\n   /* istanbul ignore else */\n   if (assertPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim) ||\n         ex.prim === \"operation\") {\n         throw new MichelsonValidationError(ex, `${ex.prim}: type can't be used as part of a parameter`);\n      }\n      traverseType(ex,\n         (ex) => assertMichelsonPassableType(ex),\n         (ex) => assertMichelsonPassableType(ex));\n   }\n   return true;\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonType(ex: Expr): ex is MichelsonType {\n   /* istanbul ignore else */\n   if (assertPrim(ex)) {\n      if (!Object.prototype.hasOwnProperty.call(typeIDs, ex.prim)) {\n         throw new MichelsonValidationError(ex, \"type expected\");\n      }\n      traverseType(ex,\n         (ex) => assertMichelsonType(ex),\n         (ex) => assertMichelsonType(ex));\n   }\n   return true;\n}\n\nfunction traverseType(\n   ex: Prim, left: (ex: Prim) => void, child: (ex: Prim) => void): ex is MichelsonType {\n\n   switch (ex.prim) {\n      case \"option\":\n      case \"list\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 1) && assertPrim(ex.args[0])) {\n            child(ex.args[0]);\n         }\n         break;\n\n      case \"contract\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 1)) {\n            assertMichelsonPassableType(ex.args[0]);\n         }\n         break;\n\n      case \"pair\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2) && assertPrim(ex.args[0]) && assertPrim(ex.args[1])) {\n            left(ex.args[0]);\n            child(ex.args[1]);\n         }\n         break;\n\n      case \"or\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2) && assertPrim(ex.args[0]) && assertPrim(ex.args[1])) {\n            child(ex.args[0]);\n            child(ex.args[1]);\n         }\n         break;\n\n      case \"lambda\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2)) {\n            assertMichelsonType(ex.args[0]);\n            assertMichelsonType(ex.args[1]);\n         }\n         break;\n\n      case \"set\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 1)) {\n            assertMichelsonComparableType(ex.args[0]);\n         }\n         break;\n\n      case \"map\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2) && assertPrim(ex.args[0]) && assertPrim(ex.args[1])) {\n            assertMichelsonComparableType(ex.args[0]);\n            child(ex.args[1]);\n         }\n         break;\n\n      case \"big_map\":\n         /* istanbul ignore else */\n         if (assertArgs(ex, 2) && assertPrim(ex.args[0]) && assertPrim(ex.args[1])) {\n            assertMichelsonComparableType(ex.args[0]);\n            assertMichelsonSerializableType(ex.args[1]);\n            child(ex.args[1]);\n         }\n         break;\n\n      default:\n         assertArgs(ex, 0);\n   }\n\n   return true;\n}\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonData(ex: Expr): ex is MichelsonData {\n   if ((\"int\" in ex) || (\"string\" in ex) || (\"bytes\" in ex)) {\n      return true;\n   }\n\n   if (Array.isArray(ex)) {\n      let mapElts = 0;\n      for (const n of ex) {\n         if (isPrim(n) && n.prim === \"Elt\") {\n            /* istanbul ignore else */\n            if (assertArgs(n, 2)) {\n               assertMichelsonData(n.args[0]);\n               assertMichelsonData(n.args[1]);\n            }\n            mapElts++;\n         } else {\n            assertMichelsonData(n);\n         }\n      }\n\n      if (mapElts !== 0 && mapElts !== ex.length) {\n         throw new MichelsonValidationError(ex, \"data entries and map elements can't be intermixed\");\n      }\n      return true;\n   }\n\n   if (isPrim(ex)) {\n      switch (ex.prim) {\n         case \"Unit\":\n         case \"True\":\n         case \"False\":\n         case \"None\":\n            assertArgs(ex, 0);\n            break;\n\n         case \"Pair\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 2)) {\n               assertMichelsonData(ex.args[0]);\n               assertMichelsonData(ex.args[1]);\n            }\n            break;\n\n         case \"Left\":\n         case \"Right\":\n         case \"Some\":\n            /* istanbul ignore else */\n            if (assertArgs(ex, 1)) {\n               assertMichelsonData(ex.args[0]);\n            }\n            break;\n\n         default:\n            if (Object.prototype.hasOwnProperty.call(instructionIDs, ex.prim)) {\n               assertMichelsonInstruction(ex);\n            } else {\n               throw new MichelsonValidationError(ex, \"data entry or instruction expected\");\n            }\n      }\n   } else {\n      throw new MichelsonValidationError(ex, \"data entry expected\");\n   }\n\n   return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * This is a type guard function which either returns true of throws an exception.\n * @param ex An AST node\n */\nexport function assertMichelsonContract(ex: Expr): ex is MichelsonContract {\n   /* istanbul ignore else */\n   if (assertSeq(ex) && ex.length === 3 && assertPrim(ex[0]) && assertPrim(ex[1]) && assertPrim(ex[2])) {\n      const p = [ex[0].prim, ex[1].prim, ex[2].prim].sort();\n      if (p[0] === \"code\" && p[1] === \"parameter\" && p[2] === \"storage\") {\n         for (const n of ex as Prim[]) {\n            /* istanbul ignore else */\n            if (assertArgs(n, 1)) {\n               switch (n.prim) {\n                  case \"code\":\n                     /* istanbul ignore else */\n                     if (assertSeq(n.args[0])) {\n                        assertMichelsonInstruction(n.args[0]);\n                     }\n                     break;\n\n                  case \"parameter\":\n                     assertMichelsonPassableType(n.args[0]);\n                     break;\n\n                  case \"storage\":\n                     assertMichelsonStorableType(n.args[0]);\n               }\n            }\n         }\n      } else {\n         throw new MichelsonValidationError(ex, \"valid Michelson script expected\");\n      }\n   }\n   return true;\n}\n\n/**\n * Checks if the node is a valid Michelson smart contract source containing all required and valid properties such as `parameter`, `storage` and `code`.\n * @param ex An AST node\n */\nexport function isMichelsonScript(ex: Expr): ex is MichelsonContract {\n   try {\n      assertMichelsonContract(ex);\n      return true;\n   } catch {\n      return false;\n   }\n}\n\n/**\n * Checks if the node is a valid Michelson data literal such as `(Pair {Elt \"0\" 0} 0)`.\n * @param ex An AST node\n */\nexport function isMichelsonData(ex: Expr): ex is MichelsonData {\n   try {\n      assertMichelsonData(ex);\n      return true;\n   } catch {\n      return false;\n   }\n}\n\n/**\n * Checks if the node is a valid Michelson code (sequence of instructions).\n * @param ex An AST node\n */\nexport function isMichelsonCode(ex: Expr): ex is MichelsonCode[] {\n   try {\n      assertMichelsonInstruction(ex);\n      return true;\n   } catch {\n      return false;\n   }\n}\n\n/**\n * Checks if the node is a valid Michelson type expression.\n * @param ex An AST node\n */\nexport function isMichelsonType(ex: Expr): ex is MichelsonType {\n   try {\n      assertMichelsonType(ex);\n      return true;\n   } catch {\n      return false;\n   }\n}\n\n","import { StringLiteral, IntLiteral, Prim, Expr } from \"./micheline\";\nimport {\n    MichelsonType, MichelsonData, MichelsonComparableType, MichelsonMapElt, MichelsonCode,\n    MichelsonTypeOption, MichelsonContract,\n    MichelsonContractSection, MichelsonStackType\n} from \"./michelson-types\";\nimport {\n    unpackAnnotations, MichelsonError, isNatural,\n    LongInteger, parseBytes, compareBytes, isDecimal,\n    checkTezosID, tezosPrefix, UnpackedAnnotations, Nullable, UnpackAnnotationsOptions,\n} from \"./utils\";\nimport { decodeBase58Check } from \"./base58\";\nimport {\n    assertMichelsonComparableType, instructionIDs,\n    assertMichelsonSerializableType, assertMichelsonStorableType\n} from \"./michelson-validator\";\n\nexport interface Context {\n    contract?: MichelsonContract;\n    traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class MichelsonTypeError extends MichelsonError<MichelsonType | MichelsonType[]> {\n    public data?: MichelsonData;\n\n    /**\n     * @param val Value of a type node caused the error\n     * @param data Value of a data node caused the error\n     * @param message An error message\n     */\n    constructor(val: MichelsonType | MichelsonType[], data?: MichelsonData, message?: string) {\n        super(val, message);\n        if (data !== undefined) {\n            this.data = data;\n        }\n        Object.setPrototypeOf(this, MichelsonTypeError.prototype);\n    }\n}\n\nexport class MichelsonInstructionError extends MichelsonError<MichelsonCode> {\n    /**\n     * @param val Value of a type node caused the error\n     * @param stackState Current stack state\n     * @param message An error message\n     */\n    constructor(val: MichelsonCode, public stackState: MichelsonStackType, message?: string) {\n        super(val, message);\n        Object.setPrototypeOf(this, MichelsonInstructionError.prototype);\n    }\n}\n\nfunction assertScalarTypesEqual(a: MichelsonType, b: MichelsonType, field: boolean = false): void {\n    if (a.prim !== b.prim) {\n        throw new MichelsonTypeError(a, undefined, `types mismatch: ${a.prim} != ${b.prim}`);\n    }\n\n    const ann = [unpackAnnotations(a), unpackAnnotations(b)];\n    if (ann[0].t && ann[1].t && ann[0].t[0] !== ann[1].t[0]) {\n        throw new MichelsonTypeError(a, undefined, `${a.prim}: type names mismatch: ${ann[0].t[0]} != ${ann[1].t[0]}`);\n    }\n    if (field &&\n        (ann[0].f && ann[1].f && ann[0].f[0] !== ann[1].f[0])) {\n        throw new MichelsonTypeError(a, undefined, `${a.prim}: field names mismatch: ${ann[0].f[0]} != ${ann[1].f}`);\n    }\n\n    switch (a.prim) {\n        case \"option\":\n        case \"list\":\n        case \"contract\":\n        case \"set\":\n            assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n            break;\n\n        case \"pair\":\n        case \"or\":\n            assertScalarTypesEqual(a.args[0], (b as typeof a).args[0], true);\n            assertScalarTypesEqual(a.args[1], (b as typeof a).args[1], true);\n            break;\n\n        case \"lambda\":\n        case \"map\":\n        case \"big_map\":\n            assertScalarTypesEqual(a.args[0], (b as typeof a).args[0]);\n            assertScalarTypesEqual(a.args[1], (b as typeof a).args[1]);\n    }\n}\n\nfunction assertTypesEqualInternal<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(a: T1, b: T2, field: boolean = false): void {\n    if (Array.isArray(a)) {\n        // type guards don't work for parametrized generic types\n        const aa = a as MichelsonType[];\n        const bb = b as MichelsonType[];\n        if (aa.length !== bb.length) {\n            throw new MichelsonTypeError(aa, undefined, `stack length mismatch: ${aa.length} != ${bb.length}`);\n        }\n        for (let i = 0; i < aa.length; i++) {\n            assertScalarTypesEqual(aa[i], bb[i], field);\n        }\n    } else {\n        assertScalarTypesEqual(a as MichelsonType, b as MichelsonType, field);\n    }\n}\n\nexport function assertTypeAnnotationsValid(t: MichelsonType, field: boolean = false): void {\n    const ann = unpackAnnotations(t);\n    if ((ann.t?.length || 0) > 1) {\n        throw new MichelsonTypeError(t, undefined, `${t.prim}: at most one type annotation allowed: ${t.annots}`);\n    }\n\n    if (field) {\n        if ((ann.f?.length || 0) > 1) {\n            throw new MichelsonTypeError(t, undefined, `${t.prim}: at most one field annotation allowed: ${t.annots}`);\n        }\n    } else {\n        if ((ann.f?.length || 0) > 0) {\n            throw new MichelsonTypeError(t, undefined, `${t.prim}: field annotations aren't allowed: ${t.annots}`);\n        }\n    }\n\n    switch (t.prim) {\n        case \"option\":\n        case \"list\":\n        case \"contract\":\n        case \"set\":\n            assertTypeAnnotationsValid(t.args[0]);\n            break;\n\n        case \"pair\":\n        case \"or\":\n            assertTypeAnnotationsValid(t.args[0], true);\n            assertTypeAnnotationsValid(t.args[1], true);\n            break;\n\n        case \"lambda\":\n        case \"map\":\n        case \"big_map\":\n            assertTypeAnnotationsValid(t.args[0]);\n            assertTypeAnnotationsValid(t.args[1]);\n    }\n}\n\n// Data integrity check\n\nconst rfc3339Re = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])[T ]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(Z|[+-]([01][0-9]|2[0-3]):([0-5][0-9]))$/;\n\nfunction parseDate(a: StringLiteral | IntLiteral): Date | null {\n    if (\"string\" in a) {\n        if (isNatural(a.string)) {\n            return new Date(parseInt(a.string, 10));\n        } else if (rfc3339Re.test(a.string)) {\n            const x = new Date(a.string);\n            if (!Number.isNaN(x.valueOf)) {\n                return x;\n            }\n        }\n    } else if (isNatural(a.int)) {\n        return new Date(parseInt(a.int, 10));\n    }\n    return null;\n}\n\nfunction compareMichelsonData(t: MichelsonComparableType, a: MichelsonData, b: MichelsonData): number {\n    switch (t.prim) {\n        case \"int\":\n        case \"nat\":\n        case \"mutez\":\n            if ((\"int\" in a) && (\"int\" in b)) {\n                return new LongInteger(a.int).cmp(new LongInteger(b.int));\n            }\n            break;\n\n        case \"string\":\n            if ((\"string\" in a) && (\"string\" in b)) {\n                const x = a.string.localeCompare(b.string);\n                return x < 0 ? -1 : x > 0 ? 1 : 0;\n            }\n            break;\n\n        case \"bytes\":\n            if ((\"bytes\" in a) && (\"bytes\" in b)) {\n                const aa = parseBytes(a.bytes);\n                const bb = parseBytes(b.bytes);\n                if (aa !== null && bb !== null) {\n                    return compareBytes(aa, bb);\n                }\n            }\n            break;\n\n        case \"bool\":\n            if ((\"prim\" in a) && (\"prim\" in b) && (a.prim === \"True\" || a.prim === \"False\") && (b.prim === \"True\" || b.prim === \"False\")) {\n                return a.prim === b.prim ? 0 : a.prim === \"False\" ? -1 : 1;\n            }\n            break;\n\n        case \"key_hash\":\n        case \"address\":\n            if ((\"string\" in a) && (\"string\" in b)) {\n                return compareBytes(decodeBase58Check(a.string), decodeBase58Check(b.string));\n            }\n            break;\n\n        case \"timestamp\":\n            if (((\"string\" in a) || (\"int\" in a)) && ((\"string\" in b) || (\"int\" in b))) {\n                const aa = parseDate(a);\n                const bb = parseDate(b);\n                if (aa !== null && bb !== null) {\n                    const x = aa.valueOf() - bb.valueOf();\n                    return x < 0 ? -1 : x > 0 ? 1 : 0;\n                }\n            }\n            break;\n\n        case \"pair\":\n            if ((\"prim\" in a) && (\"prim\" in b) && (a.prim === \"Pair\") && (b.prim === \"Pair\")) {\n                const x = compareMichelsonData(t.args[0], a.args[0], b.args[0]);\n                if (x !== 0) {\n                    return x;\n                }\n                return compareMichelsonData(t.args[1], a.args[1], b.args[1]);\n            }\n\n    }\n    // Unlikely, types are expected to be verified before the function call\n    throw new MichelsonTypeError(t, undefined, `non comparable values: ${a}, ${b}`);\n}\n\n// Simplified version of assertMichelsonInstruction() for previously validated data\nfunction isFunction(d: MichelsonData): d is MichelsonCode[] {\n    if (!Array.isArray(d)) {\n        return false;\n    }\n    for (const v of d) {\n        if (!(Array.isArray(v) && isFunction(v) ||\n            (\"prim\" in v) && Object.prototype.hasOwnProperty.call(instructionIDs, v.prim))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction assertDataValidInternal(d: MichelsonData, t: MichelsonType, ctx: Context | null): void {\n    switch (t.prim) {\n        // Atomic literals\n        case \"int\":\n            if ((\"int\" in d) && isDecimal(d.int)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `integer value expected: ${JSON.stringify(d)}`);\n\n        case \"nat\":\n        case \"mutez\":\n            if ((\"int\" in d) && isNatural(d.int)) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `natural value expected: ${JSON.stringify(d)}`);\n\n        case \"string\":\n            if (\"string\" in d) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `string value expected: ${JSON.stringify(d)}`);\n\n        case \"bytes\":\n            if (\"bytes\" in d) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `bytes value expected: ${JSON.stringify(d)}`);\n\n        case \"bool\":\n            if ((\"prim\" in d) && (d.prim === \"True\" || d.prim === \"False\")) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `boolean value expected: ${JSON.stringify(d)}`);\n\n        case \"key_hash\":\n            if ((\"string\" in d) &&\n                checkTezosID(d.string,\n                    \"ED25519PublicKeyHash\",\n                    \"SECP256K1PublicKeyHash\",\n                    \"P256PublicKeyHash\") !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `key hash expected: ${JSON.stringify(d)}`);\n\n        case \"timestamp\":\n            if (((\"string\" in d) || (\"int\" in d)) && parseDate(d) !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `timestamp expected: ${JSON.stringify(d)}`);\n\n        case \"address\":\n            if (\"string\" in d) {\n                let address = d.string;\n                const ep = d.string.indexOf(\"%\");\n                if (ep >= 0) {\n                    // trim entry point\n                    address = d.string.slice(0, ep);\n                }\n                if (checkTezosID(address,\n                    \"ED25519PublicKeyHash\",\n                    \"SECP256K1PublicKeyHash\",\n                    \"P256PublicKeyHash\",\n                    \"ContractHash\") !== null) {\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, d, `address expected: ${JSON.stringify(d)}`);\n\n        case \"key\":\n            if ((\"string\" in d) &&\n                checkTezosID(d.string,\n                    \"ED25519PublicKey\",\n                    \"SECP256K1PublicKey\",\n                    \"P256PublicKey\") !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `public key expected: ${JSON.stringify(d)}`);\n\n        case \"unit\":\n            if ((\"prim\" in d) && d.prim === \"Unit\") {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `unit value expected: ${JSON.stringify(d)}`);\n\n        case \"signature\":\n            if ((\"string\" in d) &&\n                checkTezosID(d.string,\n                    \"ED25519Signature\",\n                    \"SECP256K1Signature\",\n                    \"P256Signature\",\n                    \"GenericSignature\") !== null) {\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `signature expected: ${JSON.stringify(d)}`);\n\n        case \"chain_id\":\n            if (\"bytes\" in d) {\n                const x = parseBytes(d.bytes);\n                if (x !== null && x.length === tezosPrefix.ChainID[0]) {\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, d, `chain id expected: ${JSON.stringify(d)}`);\n\n        case \"operation\":\n            throw new MichelsonTypeError(t, d, \"operation type can't be represented as a literal value\");\n\n        case \"contract\":\n            throw new MichelsonTypeError(t, d, \"contract type can't be represented as a literal value\");\n\n        // Complex types\n        case \"option\":\n            if (\"prim\" in d) {\n                if (d.prim === \"None\") {\n                    return;\n                } else if (d.prim === \"Some\") {\n                    assertDataValidInternal(d.args[0], t.args[0], ctx);\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, d, `option expected: ${JSON.stringify(d)}`);\n\n        case \"list\":\n        case \"set\":\n            if (Array.isArray(d)) {\n                let prev: MichelsonData | undefined;\n                for (const v of d) {\n                    if ((\"prim\" in v) && v.prim === \"Elt\") {\n                        throw new MichelsonTypeError(t, d, `Elt item outside of a map literal: ${JSON.stringify(d)}`);\n                    }\n                    assertDataValidInternal(v, t.args[0], ctx);\n                    if (t.prim === \"set\") {\n                        if (prev === undefined) {\n                            prev = v;\n                        } else if (compareMichelsonData(t.args[0], prev, v) > 0) {\n                            throw new MichelsonTypeError(t, d, `set elements must be ordered: ${JSON.stringify(d)}`);\n                        }\n                    }\n                }\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n        case \"pair\":\n            if ((\"prim\" in d) && d.prim === \"Pair\") {\n                assertDataValidInternal(d.args[0], t.args[0], ctx);\n                assertDataValidInternal(d.args[1], t.args[1], ctx);\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `pair expected: ${JSON.stringify(d)}`);\n\n        case \"or\":\n            if (\"prim\" in d) {\n                if (d.prim === \"Left\") {\n                    assertDataValidInternal(d.args[0], t.args[0], ctx);\n                    return;\n                } else if (d.prim === \"Right\") {\n                    assertDataValidInternal(d.args[0], t.args[1], ctx);\n                    return;\n                }\n            }\n            throw new MichelsonTypeError(t, d, `union (or) expected: ${JSON.stringify(d)}`);\n\n        case \"lambda\":\n            if (isFunction(d)) {\n                const ret = functionTypeInternal(d, [t.args[0]], ctx);\n                if (\"failed\" in ret) {\n                    throw new MichelsonTypeError(t, d, `function is failed with error type: ${ret.failed}`);\n                }\n                if (ret.length !== 1) {\n                    throw new MichelsonTypeError(t, d, `function must return a value`);\n                }\n                assertTypesEqualInternal(t.args[1], ret[0]);\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `function expected: ${JSON.stringify(d)}`);\n\n        case \"map\":\n        case \"big_map\":\n            if (Array.isArray(d)) {\n                let prev: MichelsonMapElt | undefined;\n                for (const v of d) {\n                    if (!(\"prim\" in v) || v.prim !== \"Elt\") {\n                        throw new MichelsonTypeError(t, d, `map elements expected: ${JSON.stringify(d)}`);\n                    }\n                    assertDataValidInternal(v.args[0], t.args[0], ctx);\n                    assertDataValidInternal(v.args[1], t.args[1], ctx);\n                    if (prev === undefined) {\n                        prev = v;\n                    } else if (compareMichelsonData(t.args[0], prev.args[0], v.args[0]) > 0) {\n                        throw new MichelsonTypeError(t, d, `map elements must be ordered: ${JSON.stringify(d)}`);\n                    }\n                }\n                return;\n            }\n            throw new MichelsonTypeError(t, d, `${t.prim} expected: ${JSON.stringify(d)}`);\n\n        default:\n            throw new MichelsonTypeError((t as MichelsonType), d, `unexpected type: ${(t as MichelsonType).prim}`);\n    }\n}\n\n// Code validation\n\ntype MichelsonTypeID = MichelsonType[\"prim\"];\n\ntype TT1<T1 extends MichelsonTypeID[] | null> = [T1];\ntype TT2<T1 extends MichelsonTypeID[] | null, T2 extends MichelsonTypeID[] | null> = [T1, T2];\ntype TT3<T1 extends MichelsonTypeID[] | null, T2 extends MichelsonTypeID[] | null, T3 extends MichelsonTypeID[] | null> = [T1, T2, T3];\ntype TT4<T1 extends MichelsonTypeID[] | null, T2 extends MichelsonTypeID[] | null, T3 extends MichelsonTypeID[] | null, T4 extends MichelsonTypeID[] | null> = [T1, T2, T3, T4];\ntype MT<T extends MichelsonTypeID[] | null> = MichelsonType<T extends MichelsonTypeID[] ? T[number] : MichelsonTypeID>;\n\ntype StackType<T extends (MichelsonTypeID[] | null)[]> =\n    T extends TT1<infer T1> ? [MT<T1>] :\n    T extends TT2<infer T1, infer T2> ? [MT<T1>, MT<T2>] :\n    T extends TT3<infer T1, infer T2, infer T3> ? [MT<T1>, MT<T2>, MT<T3>] :\n    T extends TT4<infer T1, infer T2, infer T3, infer T4> ? [MT<T1>, MT<T2>, MT<T3>, MT<T4>] :\n    never;\n\nexport interface InstructionTrace {\n    op: MichelsonCode;\n    in: MichelsonType[];\n    out: MichelsonStackType;\n}\n\nfunction functionTypeInternal(inst: MichelsonCode, stack: MichelsonType[], ctx: Context | null): MichelsonStackType {\n    if (Array.isArray(inst)) {\n        let ret: MichelsonStackType = stack;\n        let s = stack;\n        let i = 0;\n        for (const op of inst) {\n            const ft = functionTypeInternal(op, s, ctx);\n            ret = ft;\n            if (\"failed\" in ft) {\n                break;\n            }\n            s = ft;\n            i++;\n        }\n\n        if ((\"failed\" in ret) && i !== inst.length - 1) {\n            throw new MichelsonInstructionError(inst, ret, \"FAIL must appear in a tail position\");\n        }\n\n        if (ctx?.traceCallback !== undefined) {\n            const trace: InstructionTrace = {\n                op: inst,\n                in: stack,\n                out: ret,\n            };\n            ctx.traceCallback(trace);\n        }\n\n        return ret;\n    }\n    const instruction = inst; // Make it const for type guarding\n\n    // make sure the stack has enough number of arguments of specific types\n    function args<T extends (MichelsonTypeID[] | null)[]>(n: number, ...typeIds: T): StackType<T> {\n        if (stack.length < typeIds.length + n) {\n            throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: stack must have at least ${typeIds.length} element(s)`);\n        }\n\n        let i = n;\n        for (const ids of typeIds) {\n            if (ids !== null && ids.length !== 0) {\n                let ii = 0;\n                while (ii < ids.length && ids[ii] !== stack[i].prim) {\n                    ii++;\n                }\n                if (ii === ids.length) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: stack type mismatch: [${i}] expected to be ${ids}, got ${stack[i].prim} instead`);\n                }\n            }\n            i++;\n        }\n        return stack.slice(n, typeIds.length + n) as StackType<T>;\n    }\n\n    function wrap<T extends unknown[], U>(fn: (...args: T) => U) {\n        return (...args: T): U => {\n            try {\n                return fn(...args);\n            } catch (err) {\n                if (err instanceof MichelsonError) {\n                    throw new MichelsonInstructionError(instruction, stack, err.message);\n                } else {\n                    throw err;\n                }\n            }\n        };\n    }\n\n    function wrapPred<T extends Expr, U extends MichelsonType & T>(fn: (arg: T) => arg is U) {\n        return (arg: T): arg is U => {\n            try {\n                return fn(arg);\n            } catch (err) {\n                if (err instanceof MichelsonError) {\n                    throw new MichelsonInstructionError(instruction, stack, err.message);\n                } else {\n                    throw err;\n                }\n            }\n        };\n    }\n\n    const argAnnotations = wrap(unpackAnnotations);\n    const ensureTypesEqual = wrap(assertTypesEqualInternal);\n    const ensureComparableType = wrapPred(assertMichelsonComparableType);\n    const ensureSerializableType = wrapPred(assertMichelsonSerializableType);\n    const ensureStorableType = wrapPred(assertMichelsonStorableType);\n\n    // unpack instruction annotations and assert their maximum number\n    function instructionAnnotations(num: { f?: number; t?: number; v?: number }, opt?: UnpackAnnotationsOptions) {\n        const a = unpackAnnotations(instruction, opt);\n        const assertNum = (a: string[] | undefined, n: number | undefined, type: string) => {\n            if (a && a.length > (n || 0)) {\n                throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: at most ${n || 0} ${type} annotations allowed`);\n            }\n        };\n        assertNum(a.f, num.f, \"field\");\n        assertNum(a.t, num.t, \"type\");\n        assertNum(a.v, num.v, \"variable\");\n        return a;\n    }\n\n    // also keeps annotation class if null is provided\n    function annotate<T extends MichelsonType>(t: T, a: Nullable<UnpackedAnnotations>): T {\n        const src = argAnnotations(t);\n        const ann = (a.v !== undefined || a.t !== undefined || a.f !== undefined) ?\n            [\n                ...((a.v === null ? src.v : a.v) || []),\n                ...((a.t === null ? src.t : a.t) || []),\n                ...((a.f === null ? src.f : a.f) || [])\n            ] : undefined;\n\n        const { annots, ...rest } = t;\n        return { ...(rest as T), ...(ann && ann.length !== 0 && { annots: ann }) };\n    }\n\n    // shortcut to copy at most one variable annotation from the instruction to the type\n    function annotateVar<T extends MichelsonType>(t: T, def?: string) {\n        const ia = instructionAnnotations({ v: 1 });\n        return annotate(t, { v: ia.v !== undefined ? ia.v : def !== undefined ? [def] : null });\n    }\n\n    const varSuffix = (a: UnpackedAnnotations, suffix: string) => [\"@\" + (a.v ? a.v[0].slice(1) + \".\" : \"\") + suffix];\n\n    function branchType(br0: MichelsonStackType, br1: MichelsonStackType): MichelsonStackType {\n        if ((\"failed\" in br0) || (\"failed\" in br1)) {\n            // Might be useful for debugging\n            if ((\"failed\" in br0) && (\"failed\" in br1)) {\n                try {\n                    assertTypesEqualInternal(br0.failed, br1.failed);\n                    return br0;\n                } catch {\n                    return { failed: { prim: \"or\", args: [br0.failed, br1.failed] } };\n                }\n            } else {\n                return (\"failed\" in br0) ? br1 : br0;\n            }\n        } else {\n            ensureTypesEqual(br0, br1);\n            return br0;\n        }\n    }\n\n    let ret: MichelsonStackType;\n\n    switch (instruction.prim) {\n        case \"DUP\":\n            ret = [args(0, null)[0], ...stack];\n            break;\n\n        case \"SWAP\":\n            {\n                const s = args(0, null, null);\n                instructionAnnotations({});\n                ret = [s[1], s[0], ...stack.slice(2)];\n                break;\n            }\n\n        case \"SOME\":\n            ret = [annotate({ prim: \"option\", args: [args(0, null)[0]] }, instructionAnnotations({ t: 1, v: 1 })), ...stack.slice(1)];\n            break;\n\n        case \"UNIT\":\n            ret = [annotate({ prim: \"unit\" }, instructionAnnotations({ v: 1, t: 1 })), ...stack];\n            break;\n\n        case \"PAIR\":\n            {\n                const s = args(0, null, null);\n                const va = [argAnnotations(s[0]), argAnnotations(s[1])] as const; // stack annotations\n                const ia = instructionAnnotations({ f: 2, t: 1, v: 1 }, { specialFields: true, emptyFields: true }); // instruction annotations\n                const trim = (s: string) => {\n                    const i = s.lastIndexOf(\".\");\n                    return s.slice(i > 0 ? i + 1 : 1);\n                };\n                const field = (n: 0 | 1) =>\n                    ia.f && ia.f.length > n && ia.f[n] !== \"%\" ?\n                        ia.f[n] === \"%@\" ?\n                            va[n].v ? [\"%\" + trim(va[n].v?.[0] || \"\")] : undefined :\n                            [ia.f[n]] :\n                        undefined;\n\n                ret = [annotate({\n                    prim: \"pair\", args: [\n                        annotate(s[0], { v: null, t: null, f: field(0) }),\n                        annotate(s[1], { v: null, t: null, f: field(1) }),\n                    ]\n                }, { t: ia.t, v: ia.v }), ...stack.slice(2)];\n                break;\n            }\n\n        case \"CAR\":\n        case \"CDR\":\n            {\n                const s = args(0, [\"pair\"]);\n                const ia = instructionAnnotations({ f: 1, v: 1 }, { specialVar: true });\n                const child = s[0].args[instruction.prim === \"CAR\" ? 0 : 1];\n                const ca = argAnnotations(child);\n                if (ia.f && ca.f && ia.f[0] !== ca.f[0]) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: field names doesn't match: ${ia.f[0]} !== ${ca.f[0]}`);\n                }\n                const va = argAnnotations(s[0]);\n                ret = [annotate(child, {\n                    t: null,\n                    v: ia.v ?\n                        ia.v[0] === \"@%\" ?\n                            ca.f ? [\"@\" + ca.f[0].slice(1)] : undefined :\n                            ia.v[0] === \"@%%\" ?\n                                va.v ?\n                                    [\"@\" + va.v[0].slice(1) + \".\" + (ca.f ? ca.f[0].slice(1) : instruction.prim.toLocaleLowerCase())] :\n                                    ca.f ? [\"@\" + ca.f[0].slice(1)] : undefined :\n                                ia.v :\n                        null\n                }), ...stack.slice(1)];\n                break;\n            }\n\n        case \"CONS\":\n            {\n                const s = args(0, null, [\"list\"]);\n                ensureTypesEqual(s[0], s[1].args[0]);\n                ret = [annotateVar({ prim: \"list\", args: [s[1].args[0]] }), ...stack.slice(2)];\n                break;\n            }\n\n        case \"SIZE\":\n            args(0, [\"string\", \"list\", \"set\", \"map\", \"bytes\"]);\n            ret = [annotateVar({ prim: \"nat\" }), ...stack.slice(1)];\n            break;\n\n        case \"MEM\":\n            {\n                const s = args(0, null, [\"set\", \"map\", \"big_map\"]);\n                ensureComparableType(s[0]);\n                ensureTypesEqual(s[0], s[1].args[0]);\n                ret = [annotateVar({ prim: \"bool\" }), ...stack.slice(2)];\n                break;\n            }\n\n        case \"GET\":\n            {\n                const s = args(0, null, [\"map\", \"big_map\"]);\n                ensureComparableType(s[0]);\n                ensureTypesEqual(s[0], s[1].args[0]);\n                ret = [annotateVar({ prim: \"option\", args: [s[1].args[1]] }), ...stack.slice(2)];\n                break;\n            }\n\n        case \"UPDATE\":\n            {\n                const s0 = args(0, null, [\"bool\", \"option\"]);\n                if (ensureComparableType(s0[0])) {\n                    if (s0[1].prim === \"bool\") {\n                        const s1 = args(2, [\"set\"]);\n                        ensureTypesEqual<MichelsonComparableType, MichelsonComparableType>(s0[0], s1[0].args[0]);\n                        ret = [annotateVar({\n                            prim: \"set\",\n                            args: [annotate(s0[0], { t: null })],\n                        }), ...stack.slice(3)];\n                    } else {\n                        const s1 = args(2, [\"map\", \"big_map\"]);\n                        ensureTypesEqual<MichelsonComparableType, MichelsonComparableType>(s0[0], s1[0].args[0]);\n                        if (s1[0].prim === \"map\") {\n                            ret = [annotateVar({\n                                prim: \"map\",\n                                args: [\n                                    annotate(s0[0], { t: null }),\n                                    annotate(s0[1].args[0], { t: null }),\n                                ],\n                            }), ...stack.slice(3)];\n                        } else if (ensureSerializableType(s0[1].args[0])) {\n                            ret = [annotateVar({\n                                prim: \"big_map\",\n                                args: [\n                                    annotate(s0[0], { t: null }),\n                                    annotate(s0[1].args[0], { t: null }),\n                                ],\n                            }), ...stack.slice(3)];\n                        } else {\n                            ret = []; // never\n                        }\n                    }\n                } else {\n                    ret = []; // never\n                }\n                break;\n            }\n\n        case \"EXEC\":\n            {\n                const s = args(0, null, [\"lambda\"]);\n                ensureTypesEqual(s[0], s[1].args[0]);\n                ret = [annotateVar(s[1].args[1]), ...stack.slice(2)];\n                break;\n            }\n\n        case \"APPLY\":\n            {\n                const s = args(0, null, [\"lambda\"]);\n                if (s[1].args[0].prim !== \"pair\") {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function's argument must be a pair: ${s[1].args[0].prim}`);\n                }\n                const pt = s[1].args[0];\n                ensureTypesEqual(s[0], pt.args[0]);\n                ret = [annotateVar({ prim: \"lambda\", args: [pt.args[1], s[1].args[1]] }), ...stack.slice(2)];\n                break;\n            }\n\n        case \"FAILWITH\":\n            ret = { failed: args(0, null)[0] };\n            break;\n\n        case \"RENAME\":\n            ret = [annotateVar(args(0, null)[0]), ...stack.slice(1)];\n            break;\n\n        case \"CONCAT\":\n            {\n                const s0 = args(0, [\"string\", \"list\", \"bytes\"]);\n                if (s0[0].prim === \"list\") {\n                    if (s0[0].args[0].prim !== \"string\" && s0[0].args[0].prim !== \"bytes\") {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't concatenate list of ${s0[0].args[0].prim}'s`);\n                    }\n                    ret = [annotateVar(s0[0].args[0]), ...stack.slice(1)];\n                } else {\n                    const s1 = args(1, [\"string\", \"bytes\"]);\n                    if (s0[0].prim !== s1[0].prim) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't concatenate ${s0[0].prim} with ${s1[0].prim}`);\n                    }\n                    ret = [annotateVar(s1[0]), ...stack.slice(2)];\n                }\n                break;\n            }\n\n        case \"SLICE\":\n            ret = [annotateVar({ prim: \"option\", args: [args(0, [\"nat\"], [\"nat\"], [\"string\", \"bytes\"])[2]] }), ...stack.slice(3)];\n            break;\n\n        case \"PACK\":\n            {\n                const s = args(0, null);\n                ensureSerializableType(s[0]);\n                ret = [annotateVar({ prim: \"bytes\" }), ...stack.slice(1)];\n                break;\n            }\n\n        case \"ADD\":\n            {\n                const s = args(0, [\"nat\", \"int\", \"timestamp\", \"mutez\"], [\"nat\", \"int\", \"timestamp\", \"mutez\"]);\n                if (s[0].prim === \"nat\" && s[1].prim === \"nat\") {\n                    ret = [annotateVar({ prim: \"nat\" }), ...stack.slice(2)];\n                } else if ((s[0].prim === \"nat\" || s[0].prim === \"int\") && (s[1].prim === \"nat\" || s[1].prim === \"int\")) {\n                    ret = [annotateVar({ prim: \"int\" }), ...stack.slice(2)];\n                } else if (s[0].prim === \"int\" && s[1].prim === \"timestamp\" || s[0].prim === \"timestamp\" && s[1].prim === \"int\") {\n                    ret = [annotateVar({ prim: \"timestamp\" }), ...stack.slice(2)];\n                } else if (s[0].prim === \"mutez\" && s[1].prim === \"mutez\") {\n                    ret = [annotateVar({ prim: \"mutez\" }), ...stack.slice(2)];\n                } else {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't add ${s[0].prim} to ${s[1].prim}`);\n                }\n                break;\n            }\n\n        case \"SUB\":\n            {\n                const s = args(0, [\"nat\", \"int\", \"timestamp\", \"mutez\"], [\"nat\", \"int\", \"timestamp\", \"mutez\"]);\n                if (((s[0].prim === \"nat\" || s[0].prim === \"int\") && (s[1].prim === \"nat\" || s[1].prim === \"int\")) ||\n                    s[0].prim === \"timestamp\" && s[1].prim === \"timestamp\") {\n                    ret = [annotateVar({ prim: \"int\" }), ...stack.slice(2)];\n                } else if (s[0].prim === \"timestamp\" && s[1].prim === \"int\") {\n                    ret = [annotateVar({ prim: \"timestamp\" }), ...stack.slice(2)];\n                } else if (s[0].prim === \"mutez\" && s[1].prim === \"mutez\") {\n                    ret = [annotateVar({ prim: \"mutez\" }), ...stack.slice(2)];\n                } else {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't subtract ${s[0].prim} from ${s[1].prim}`);\n                }\n                break;\n            }\n\n        case \"MUL\":\n            {\n                const s = args(0, [\"nat\", \"int\", \"mutez\"], [\"nat\", \"int\", \"mutez\"]);\n                if (s[0].prim === \"nat\" && s[1].prim === \"nat\") {\n                    ret = [annotateVar({ prim: \"nat\" }), ...stack.slice(2)];\n                } else if ((s[0].prim === \"nat\" || s[0].prim === \"int\") && (s[1].prim === \"nat\" || s[1].prim === \"int\")) {\n                    ret = [annotateVar({ prim: \"int\" }), ...stack.slice(2)];\n                } else if (s[0].prim === \"nat\" && s[1].prim === \"mutez\" || s[0].prim === \"mutez\" && s[1].prim === \"nat\") {\n                    ret = [annotateVar({ prim: \"mutez\" }), ...stack.slice(2)];\n                } else {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't multiply ${s[0].prim} by ${s[1].prim}`);\n                }\n                break;\n            }\n\n        case \"EDIV\":\n            {\n                const res = (a: \"nat\" | \"int\" | \"mutez\", b: \"nat\" | \"int\" | \"mutez\"): MichelsonTypeOption => ({ prim: \"option\", args: [{ prim: \"pair\", args: [{ prim: a }, { prim: b }] }] });\n                const s = args(0, [\"nat\", \"int\", \"mutez\"], [\"nat\", \"int\", \"mutez\"]);\n                if (s[0].prim === \"nat\" && s[1].prim === \"nat\") {\n                    ret = [annotateVar(res(\"nat\", \"nat\")), ...stack.slice(2)];\n                } else if ((s[0].prim === \"nat\" || s[0].prim === \"int\") && (s[1].prim === \"nat\" || s[1].prim === \"int\")) {\n                    ret = [annotateVar(res(\"int\", \"nat\")), ...stack.slice(2)];\n                } else if (s[0].prim === \"mutez\" && s[1].prim === \"nat\") {\n                    ret = [annotateVar(res(\"mutez\", \"mutez\")), ...stack.slice(2)];\n                } else if (s[0].prim === \"mutez\" && s[1].prim === \"mutez\") {\n                    ret = [annotateVar(res(\"nat\", \"mutez\")), ...stack.slice(2)];\n                } else {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: can't euclideally divide ${s[0].prim} by ${s[1].prim}`);\n                }\n                break;\n            }\n\n        case \"ABS\":\n            args(0, [\"int\"]);\n            ret = [annotateVar({ prim: \"nat\" }), ...stack.slice(1)];\n            break;\n\n        case \"ISNAT\":\n            args(0, [\"int\"]);\n            ret = [annotateVar({ prim: \"option\", args: [{ prim: \"nat\" }] }), ...stack.slice(1)];\n            break;\n\n        case \"INT\":\n            args(0, [\"nat\"]);\n            ret = [annotateVar({ prim: \"int\" }), ...stack.slice(1)];\n            break;\n\n        case \"NEG\":\n            args(0, [\"nat\", \"int\"]);\n            ret = [annotateVar({ prim: \"int\" }), ...stack.slice(1)];\n            break;\n\n        case \"LSL\":\n        case \"LSR\":\n            args(0, [\"nat\"], [\"nat\"]);\n            ret = [annotateVar({ prim: \"nat\" }), ...stack.slice(2)];\n            break;\n\n        case \"OR\":\n        case \"XOR\":\n            {\n                const s = args(0, [\"nat\", \"bool\"], [\"nat\", \"bool\"]);\n                if (s[0].prim !== s[1].prim) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`);\n                }\n                ret = [annotateVar(s[1]), ...stack.slice(2)];\n                break;\n            }\n\n        case \"AND\":\n            {\n                const s = args(0, [\"nat\", \"bool\", \"int\"], [\"nat\", \"bool\"]);\n                if ((s[0].prim !== \"int\" || s[1].prim !== \"nat\") && s[0].prim !== s[1].prim) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: both arguments must be of the same type: ${s[0].prim}, ${s[1].prim}`);\n                }\n                ret = [annotateVar(s[1]), ...stack.slice(2)];\n                break;\n            }\n\n        case \"NOT\":\n            {\n                const s = args(0, [\"nat\", \"bool\", \"int\"]);\n                if (s[0].prim === \"bool\") {\n                    ret = [annotateVar({ prim: \"bool\" }), ...stack.slice(1)];\n                } else {\n                    ret = [annotateVar({ prim: \"int\" }), ...stack.slice(1)];\n                }\n                break;\n            }\n\n        case \"COMPARE\":\n            {\n                const s = args(0, null, null);\n                ensureComparableType(s[0]);\n                ensureComparableType(s[1]);\n                ret = [annotateVar({ prim: \"int\" }), ...stack.slice(2)];\n                break;\n            }\n\n        case \"EQ\":\n        case \"NEQ\":\n        case \"LT\":\n        case \"GT\":\n        case \"LE\":\n        case \"GE\":\n            args(0, [\"int\"]);\n            ret = [annotateVar({ prim: \"bool\" }), ...stack.slice(1)];\n            break;\n\n        case \"SELF\":\n            {\n                if (ctx?.contract === undefined) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract required`);\n                }\n                const ia = instructionAnnotations({ f: 1, v: 1 });\n                const ep = contractEntryPoint(ctx.contract, ia.f?.[0]);\n                if (ep === null) {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: contract has no entrypoint named ${ep}`);\n                }\n                ret = [annotate({ prim: \"contract\", args: [ep] }, { v: ia.v ? ia.v : [\"@self\"] }), ...stack];\n                break;\n            }\n\n        case \"TRANSFER_TOKENS\":\n            {\n                const s = args(0, null, [\"mutez\"], [\"contract\"]);\n                ensureTypesEqual(s[0], s[2].args[0]);\n                ret = [annotateVar({ prim: \"operation\" }), ...stack.slice(3)];\n                break;\n            }\n\n        case \"SET_DELEGATE\":\n            {\n                const s = args(0, [\"option\"]);\n                if (s[0].args[0].prim !== \"key_hash\") {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${s[0].args[0].prim}`);\n                }\n                ret = [annotateVar({ prim: \"operation\" }), ...stack.slice(1)];\n                break;\n            }\n\n        case \"CREATE_ACCOUNT\":\n            {\n                const ia = instructionAnnotations({ v: 2 }, { emptyVar: true });\n                const s = args(0, [\"key_hash\"], [\"option\"], [\"bool\"], [\"mutez\"]);\n                if (s[1].args[0].prim !== \"key_hash\") {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${s[1].args[0].prim}`);\n                }\n                ret = [\n                    annotate({ prim: \"operation\" }, { v: ia.v && ia.v.length > 0 && ia.v[0] !== \"@\" ? [ia.v[0]] : undefined }),\n                    annotate({ prim: \"address\" }, { v: ia.v && ia.v.length > 1 && ia.v[1] !== \"@\" ? [ia.v[1]] : undefined }),\n                    ...stack.slice(4)\n                ];\n                break;\n            }\n\n        case \"IMPLICIT_ACCOUNT\":\n            args(0, [\"key_hash\"]);\n            ret = [annotateVar({ prim: \"contract\", args: [{ prim: \"unit\" }] }), ...stack.slice(1)];\n            break;\n\n        case \"NOW\":\n            ret = [annotateVar({ prim: \"timestamp\" }, \"@now\"), ...stack];\n            break;\n\n        case \"AMOUNT\":\n            ret = [annotateVar({ prim: \"mutez\" }, \"@amount\"), ...stack];\n            break;\n\n        case \"BALANCE\":\n            ret = [annotateVar({ prim: \"mutez\" }, \"@balance\"), ...stack];\n            break;\n\n        case \"CHECK_SIGNATURE\":\n            args(0, [\"key\"], [\"signature\"], [\"bytes\"]);\n            ret = [annotateVar({ prim: \"bool\" }), ...stack.slice(3)];\n            break;\n\n        case \"BLAKE2B\":\n        case \"SHA256\":\n        case \"SHA512\":\n            args(0, [\"bytes\"]);\n            ret = [annotateVar({ prim: \"bytes\" }), ...stack.slice(1)];\n            break;\n\n        case \"HASH_KEY\":\n            args(0, [\"key\"]);\n            ret = [annotateVar({ prim: \"key_hash\" }), ...stack.slice(1)];\n            break;\n\n        case \"STEPS_TO_QUOTA\":\n            ret = [annotateVar({ prim: \"nat\" }, \"@steps\"), ...stack];\n            break;\n\n        case \"SOURCE\":\n            ret = [annotateVar({ prim: \"address\" }, \"@source\"), ...stack];\n            break;\n\n        case \"SENDER\":\n            ret = [annotateVar({ prim: \"address\" }, \"@sender\"), ...stack];\n            break;\n\n        case \"ADDRESS\":\n            {\n                const s = args(0, [\"contract\"]);\n                const ia = instructionAnnotations({ v: 1 });\n                ret = [\n                    annotate({ prim: \"address\" }, { v: ia.v ? ia.v : varSuffix(argAnnotations(s[0]), \"address\") }),\n                    ...stack.slice(1)];\n                break;\n            }\n\n        case \"CHAIN_ID\":\n            ret = [annotateVar({ prim: \"chain_id\" }), ...stack];\n            break;\n\n        case \"DROP\":\n            {\n                instructionAnnotations({});\n                const n = instruction.args !== undefined ? parseInt(instruction.args[0].int, 10) : 1;\n                args(n - 1, null);\n                ret = stack.slice(n);\n                break;\n            }\n\n        case \"DIG\":\n            {\n                instructionAnnotations({});\n                const n = parseInt(instruction.args[0].int, 10);\n                ret = [args(n, null)[0], ...stack.slice(0, n), ...stack.slice(n + 1)];\n                break;\n            }\n\n        case \"DUG\":\n            {\n                instructionAnnotations({});\n                const n = parseInt(instruction.args[0].int, 10);\n                ret = [...stack.slice(1, n + 1), args(0, null)[0], ...stack.slice(n + 1)];\n                break;\n            }\n\n        case \"NONE\":\n            assertTypeAnnotationsValid(instruction.args[0]);\n            ret = [annotate({ prim: \"option\", args: [instruction.args[0]] }, instructionAnnotations({ t: 1, v: 1 })), ...stack];\n            break;\n\n        case \"LEFT\":\n        case \"RIGHT\":\n            {\n                const s = args(0, null);\n                const ia = instructionAnnotations({ f: 2, t: 1, v: 1 }, { specialFields: true });\n                const va = argAnnotations(s[0]);\n\n                const children: [MichelsonType, MichelsonType] = [\n                    annotate(s[0], {\n                        t: null,\n                        v: null,\n                        f: ia.f && ia.f.length > 0 && ia.f[0] !== \"%\" ?\n                            ia.f[0] === \"%@\" ?\n                                va.v ? [\"%\" + va.v[0].slice(1)] : undefined :\n                                ia.f :\n                            undefined,\n                    }),\n                    annotate(instruction.args[0], {\n                        t: null,\n                        f: ia.f && ia.f.length > 1 && ia.f[1] !== \"%\" ? ia.f : undefined,\n                    }),\n                ];\n\n                ret = [annotate({\n                    prim: \"or\", args: instruction.prim === \"LEFT\" ? children : [children[1], children[0]]\n                }, { t: ia.t, v: ia.v }), ...stack.slice(1)];\n                break;\n            }\n\n        case \"NIL\":\n            assertTypeAnnotationsValid(instruction.args[0]);\n            ret = [annotate({ prim: \"list\", args: [instruction.args[0]] }, instructionAnnotations({ t: 1, v: 1 })), ...stack];\n            break;\n\n        case \"UNPACK\":\n            args(0, [\"bytes\"]);\n            assertTypeAnnotationsValid(instruction.args[0]);\n            ret = [annotateVar({ prim: \"option\", args: [instruction.args[0]] }), ...stack.slice(1)];\n            break;\n\n        case \"CONTRACT\":\n            {\n                const s = args(0, [\"address\"]);\n                assertTypeAnnotationsValid(instruction.args[0]);\n                const ia = instructionAnnotations({ v: 1, f: 1 });\n                ret = [\n                    annotate({ prim: \"option\", args: [{ prim: \"contract\", args: [instruction.args[0]] }] }, { v: ia.v ? ia.v : varSuffix(argAnnotations(s[0]), \"contract\") }),\n                    ...stack.slice(1)];\n                break;\n            }\n\n        case \"CAST\":\n            instructionAnnotations({});\n            const s = args(0, null);\n            assertTypeAnnotationsValid(instruction.args[0]);\n            assertTypesEqualInternal(instruction.args[0], s[0]);\n            ret = [instruction.args[0], ...stack.slice(1)];\n            break;\n\n        case \"IF_NONE\":\n            {\n                instructionAnnotations({});\n                const s = args(0, [\"option\"]);\n                const tail = stack.slice(1);\n                const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n                const br1 = functionTypeInternal(instruction.args[1], [annotate(s[0].args[0], { t: null, v: varSuffix(argAnnotations(s[0]), \"some\") }), ...tail], ctx);\n                ret = branchType(br0, br1);\n                break;\n            }\n\n        case \"IF_LEFT\":\n            {\n                instructionAnnotations({});\n                const s = args(0, [\"or\"]);\n                const va = argAnnotations(s[0]);\n                const lefta = argAnnotations(s[0].args[0]);\n                const righta = argAnnotations(s[0].args[1]);\n                const tail = stack.slice(1);\n                const br0 = functionTypeInternal(instruction.args[0],\n                    [\n                        annotate(s[0].args[0], { t: null, v: varSuffix(va, lefta.f ? lefta.f[0].slice(1) : \"left\") }),\n                        ...tail\n                    ],\n                    ctx);\n                const br1 = functionTypeInternal(instruction.args[1],\n                    [\n                        annotate(s[0].args[1], { t: null, v: varSuffix(va, righta.f ? righta.f[0].slice(1) : \"right\") }),\n                        ...tail\n                    ],\n                    ctx);\n                ret = branchType(br0, br1);\n                break;\n            }\n\n        case \"IF_CONS\":\n            {\n                instructionAnnotations({});\n                const s = args(0, [\"list\"]);\n                const va = argAnnotations(s[0]);\n                const tail = stack.slice(1);\n                const br0 = functionTypeInternal(instruction.args[0],\n                    [\n                        annotate(s[0].args[0], { t: null, v: varSuffix(va, \"hd\") }),\n                        annotate(s[0], { t: null, v: varSuffix(va, \"tl\") }),\n                        ...tail\n                    ],\n                    ctx);\n                const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n                ret = branchType(br0, br1);\n                break;\n            }\n\n        case \"IF\":\n            {\n                instructionAnnotations({});\n                args(0, [\"bool\"]);\n                const tail = stack.slice(1);\n                const br0 = functionTypeInternal(instruction.args[0], tail, ctx);\n                const br1 = functionTypeInternal(instruction.args[1], tail, ctx);\n                ret = branchType(br0, br1);\n                break;\n            }\n\n        case \"MAP\":\n            {\n                const s = args(0, [\"list\", \"map\"]);\n                const tail = stack.slice(1);\n                const elt = s[0].prim === \"map\" ? { prim: \"pair\" as const, args: s[0].args } : s[0].args[0];\n                const body = functionTypeInternal(instruction.args[0],\n                    [annotate(elt, { t: null, v: varSuffix(argAnnotations(s[0]), \"elt\") }), ...tail],\n                    ctx);\n                if (\"failed\" in body) {\n                    ret = body;\n                } else {\n                    if (body.length < 1) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function must return a value`);\n                    }\n                    ensureTypesEqual(body.slice(1), tail);\n                    if (s[0].prim === \"list\") {\n                        ret = [annotateVar({ prim: \"list\", args: [body[0]] }), ...tail];\n                    } else {\n                        ret = [annotateVar({ prim: \"map\", args: [s[0].args[0], body[0]] }), ...tail];\n                    }\n                }\n                break;\n            }\n\n        case \"ITER\":\n            {\n                instructionAnnotations({});\n                const s = args(0, [\"set\", \"list\", \"map\"]);\n                const tail = stack.slice(1);\n                const elt = s[0].prim === \"map\" ? { prim: \"pair\" as const, args: s[0].args } : s[0].args[0];\n                const body = functionTypeInternal(instruction.args[0],\n                    [annotate(elt, { t: null, v: varSuffix(argAnnotations(s[0]), \"elt\") }), ...tail],\n                    ctx);\n                if (\"failed\" in body) {\n                    ret = body;\n                } else {\n                    ensureTypesEqual(body, tail);\n                    ret = tail;\n                }\n                break;\n            }\n\n        case \"LOOP\":\n            {\n                instructionAnnotations({});\n                args(0, [\"bool\"]);\n                const tail = stack.slice(1);\n                const body = functionTypeInternal(instruction.args[0], tail, ctx);\n                if (\"failed\" in body) {\n                    ret = body;\n                } else {\n                    ensureTypesEqual(body, [{ prim: \"bool\" }, ...tail]);\n                    ret = tail;\n                }\n                break;\n            }\n\n        case \"LOOP_LEFT\":\n            {\n                instructionAnnotations({});\n                const s = args(0, [\"or\"]);\n                const tail = stack.slice(1);\n                const body = functionTypeInternal(instruction.args[0],\n                    [annotate(s[0].args[0], { t: null, v: varSuffix(argAnnotations(s[0]), \"left\") }), ...tail],\n                    ctx);\n                if (\"failed\" in body) {\n                    ret = body;\n                } else {\n                    ensureTypesEqual(body, [s[0], ...tail]);\n                    ret = [annotate(s[0].args[1], { t: null, v: instructionAnnotations({ v: 1 }).v }), ...tail];\n                }\n                break;\n            }\n\n        case \"DIP\":\n            {\n                instructionAnnotations({});\n                const n = instruction.args.length === 2 ? parseInt(instruction.args[0].int, 10) : 1;\n                args(n - 1, null);\n                const head = stack.slice(0, n);\n                const tail = stack.slice(n);\n                // ternary operator is a type guard so use it instead of just `instruction.args.length - 1`\n                const body = instruction.args.length === 2 ?\n                    functionTypeInternal(instruction.args[1], tail, ctx) :\n                    functionTypeInternal(instruction.args[0], tail, ctx);\n                if (\"failed\" in body) {\n                    ret = body;\n                } else {\n                    ret = [...head, ...body];\n                }\n                break;\n            }\n\n        case \"CREATE_CONTRACT\":\n            {\n                const ia = instructionAnnotations({ v: 2 }, { emptyVar: true });\n                const s = args(0, [\"option\"], [\"mutez\"], null);\n                if (s[0].args[0].prim !== \"key_hash\") {\n                    throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: key hash expected: ${s[0].args[0].prim}`);\n                }\n                if (ensureStorableType(s[2])) {\n                    assertContractValid(instruction.args[0]);\n                    assertTypesEqualInternal(contractSection(instruction.args[0], \"storage\").args[0], s[2]);\n                }\n                ret = [\n                    annotate({ prim: \"operation\" }, { v: ia.v && ia.v.length > 0 && ia.v[0] !== \"@\" ? [ia.v[0]] : undefined }),\n                    annotate({ prim: \"address\" }, { v: ia.v && ia.v.length > 1 && ia.v[1] !== \"@\" ? [ia.v[1]] : undefined }),\n                    ...stack.slice(3)\n                ];\n                break;\n            }\n\n        case \"PUSH\":\n            assertTypeAnnotationsValid(instruction.args[0]);\n            assertDataValidInternal(instruction.args[1], instruction.args[0], ctx);\n            ret = [annotateVar(instruction.args[0]), ...stack];\n            break;\n\n        case \"EMPTY_SET\":\n            assertTypeAnnotationsValid(instruction.args[0]);\n            ret = [annotate({ prim: \"set\", args: instruction.args }, instructionAnnotations({ t: 1, v: 1 })), ...stack];\n            break;\n\n        case \"EMPTY_MAP\":\n            assertTypeAnnotationsValid(instruction.args[0]);\n            assertTypeAnnotationsValid(instruction.args[1]);\n            ret = [annotate({ prim: \"map\", args: instruction.args }, instructionAnnotations({ t: 1, v: 1 })), ...stack];\n            break;\n\n        case \"EMPTY_BIG_MAP\":\n            assertTypeAnnotationsValid(instruction.args[0]);\n            assertTypeAnnotationsValid(instruction.args[1]);\n            ret = [annotate({ prim: \"big_map\", args: instruction.args }, instructionAnnotations({ t: 1, v: 1 })), ...stack];\n            break;\n\n        case \"LAMBDA\":\n            {\n                assertTypeAnnotationsValid(instruction.args[0]);\n                assertTypeAnnotationsValid(instruction.args[1]);\n                const body = functionTypeInternal(instruction.args[2], [instruction.args[0]], ctx);\n                if (\"failed\" in body) {\n                    ret = body;\n                } else {\n                    if (body.length !== 1) {\n                        throw new MichelsonInstructionError(instruction, stack, `${instruction.prim}: function must return a value`);\n                    }\n                    assertTypesEqualInternal(instruction.args[1], body[0]);\n                    ret = [annotateVar({ prim: \"lambda\", args: [instruction.args[0], instruction.args[1]] }), ...stack];\n                }\n                break;\n            }\n\n        default:\n            throw new MichelsonError((instruction as MichelsonCode), `unexpected instruction: ${(instruction as Prim).prim}`);\n    }\n\n\n    if (ctx?.traceCallback !== undefined) {\n        const trace: InstructionTrace = {\n            op: instruction,\n            in: stack,\n            out: ret,\n        };\n        ctx.traceCallback(trace);\n    }\n\n    return ret;\n}\n\nexport function contractSection<T extends \"parameter\" | \"storage\" | \"code\">(contract: MichelsonContract, section: T): MichelsonContractSection<T> {\n    for (const s of contract) {\n        if (s.prim === section) {\n            return s as MichelsonContractSection<T>;\n        }\n    }\n    throw new MichelsonError(contract, `missing contract section: ${section}`);\n}\n\nexport function contractEntryPoint(src: MichelsonContract | MichelsonType, ep?: string): MichelsonType | null {\n    ep = ep || \"%default\";\n    const entryPoint = contractEntryPoints(src).find(x => x[0] === ep);\n\n    if (entryPoint !== undefined) {\n        return entryPoint[1];\n    } else if (ep === \"%default\") {\n        return Array.isArray(src) ? contractSection(src, \"parameter\").args[0] : src;\n    }\n    return null;\n}\n\nexport function contractEntryPoints(src: MichelsonContract | MichelsonType): [string, MichelsonType][] {\n    if (Array.isArray(src)) {\n        const param = contractSection(src, \"parameter\");\n        const ch = contractEntryPoints(param.args[0]);\n        const a = unpackAnnotations(param);\n        return a.f ? [[a.f[0], param.args[0]], ...ch] : ch;\n    }\n\n    if (src.prim === \"or\") {\n        const getArg = (n: 0 | 1): [string, MichelsonType][] => {\n            const a = unpackAnnotations(src.args[n]);\n            if (src.args[n].prim === \"or\") {\n                const ch = contractEntryPoints(src.args[n]);\n                return a.f ? [[a.f[0], src.args[n]], ...ch] : ch;\n            }\n            return a.f ? [[a.f[0], src.args[n]]] : [];\n        };\n        return [...getArg(0), ...getArg(1)];\n    }\n    return [];\n}\n\n// Contract validation\n\nexport function assertContractValid(contract: MichelsonContract, ctx?: Context): MichelsonStackType {\n    const parameter = contractSection(contract, \"parameter\").args[0];\n    assertTypeAnnotationsValid(parameter, true);\n\n    const storage = contractSection(contract, \"storage\").args[0];\n    assertTypeAnnotationsValid(storage);\n\n    const arg: MichelsonType = {\n        \"prim\": \"pair\",\n        args: [\n            { ...parameter, ...{ annots: [\"@parameter\"] } },\n            { ...storage, ...{ annots: [\"@storage\"] } },\n        ]\n    };\n\n    const code = contractSection(contract, \"code\").args[0];\n    const ret = functionTypeInternal(code, [arg], { ...ctx, ...{ contract } });\n\n    if (\"failed\" in ret) {\n        // throw new MichelsonInstructionError(code, ret, `contract fails with ${ret.failed.prim} error type`);\n        return ret;\n    }\n\n    const expected: MichelsonType = {\n        \"prim\": \"pair\",\n        args: [\n            { \"prim\": \"list\", args: [{ \"prim\": \"operation\" }] },\n            storage,\n        ]\n    };\n\n    try {\n        assertTypesEqualInternal(ret, [expected]);\n    } catch (err) {\n        if (err instanceof MichelsonError) {\n            throw new MichelsonInstructionError(code, ret, err.message);\n        } else {\n            throw err;\n        }\n    }\n\n    return ret;\n}\n\n// Exported wrapper functions\n\nexport function assertDataValid<T extends MichelsonType>(d: MichelsonData, t: T, ctx?: Context): d is MichelsonData<T> {\n    assertTypeAnnotationsValid(t);\n    assertDataValidInternal(d, t, ctx || null);\n    return true;\n}\n\nexport function functionType(inst: MichelsonCode, stack: MichelsonType[], ctx?: Context): MichelsonStackType {\n    for (const t of stack) {\n        assertTypeAnnotationsValid(t);\n    }\n\n    if (ctx?.contract !== undefined) {\n        for (const typesec of [\"parameter\", \"storage\"] as const) {\n            const sec = contractSection(ctx.contract, typesec).args[0];\n            assertTypeAnnotationsValid(sec);\n        }\n    }\n\n    return functionTypeInternal(inst, stack, ctx || null);\n}\n\nexport function assertTypesEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(a: T1, b: T2, field: boolean = false): void {\n    if (Array.isArray(a)) {\n        // type guards don't work for parametrized generic types\n        for (const v of a as MichelsonType[]) {\n            assertTypeAnnotationsValid(v);\n        }\n        for (const v of b as MichelsonType[]) {\n            assertTypeAnnotationsValid(v);\n        }\n    } else {\n        assertTypeAnnotationsValid(a as MichelsonType);\n        assertTypeAnnotationsValid(b as MichelsonType);\n    }\n    assertTypesEqualInternal(a, b, field);\n}\n\nexport function isTypeAnnotationsValid(t: MichelsonType, field: boolean = false): boolean {\n    try {\n        assertTypeAnnotationsValid(t, field);\n        return true;\n    } catch {\n        return false;\n    }\n}\n\nexport function isContractValid(contract: MichelsonContract, ctx?: Context): MichelsonStackType | null {\n    try {\n        return assertContractValid(contract, ctx);\n    } catch {\n        return null;\n    }\n}\n\nexport function isDataValid<T extends MichelsonType>(d: MichelsonData, t: T, ctx?: Context): d is MichelsonData<T> {\n    try {\n        return assertDataValid(d, t, ctx);\n    } catch {\n        return false;\n    }\n}\n\nexport function isTypeEqual<T1 extends MichelsonType | MichelsonType[], T2 extends T1>(a: T1, b: T2, field: boolean = false): boolean {\n    try {\n        assertTypesEqual(a, b, field);\n        return true;\n    } catch {\n        return false;\n    }\n}","import {\n    MichelsonContract, MichelsonContractSection, MichelsonType,\n    MichelsonData, MichelsonCode, MichelsonStackType\n} from \"./michelson-types\";\nimport {\n    assertContractValid, contractSection,\n    contractEntryPoint, assertDataValid,\n    assertTypeAnnotationsValid,\n    InstructionTrace, Context, functionType,\n    isDataValid, contractEntryPoints\n} from \"./michelson-typecheck\";\nimport { Parser } from \"./micheline-parser\";\nimport { assertMichelsonContract, assertMichelsonType, assertMichelsonData } from \"./michelson-validator\";\n\nexport interface ContractOptions {\n    traceCallback?: (t: InstructionTrace) => void;\n}\n\nexport class Contract {\n    private ctx: Context;\n    public readonly output: MichelsonStackType;\n\n    constructor(public readonly contract: MichelsonContract, opt?: ContractOptions) {\n        this.ctx = { contract, ...opt };\n        this.output = assertContractValid(contract, this.ctx);\n    }\n\n    static parse(src: string | object, opt?: ContractOptions): Contract {\n        const p = new Parser({ expandMacros: true });\n        const expr = typeof src === \"string\" ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new Error(\"empty contract\");\n        }\n        if (assertMichelsonContract(expr)) {\n            return new Contract(expr, opt);\n        }\n        throw undefined;\n    }\n\n    static parseTypeExpression(src: string | object): MichelsonType {\n        const p = new Parser({ expandMacros: true });\n        const expr = typeof src === \"string\" ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new Error(\"empty type expression\");\n        }\n        if (assertMichelsonType(expr) && assertTypeAnnotationsValid(expr)) {\n            return expr;\n        }\n        throw undefined;\n    }\n\n    static parseDataExpression(src: string | object): MichelsonData {\n        const p = new Parser({ expandMacros: true });\n        const expr = typeof src === \"string\" ? p.parseScript(src) : p.parseJSON(src);\n        if (expr === null) {\n            throw new Error(\"empty data expression\");\n        }\n        if (assertMichelsonData(expr)) {\n            return expr;\n        }\n        throw undefined;\n    }\n\n    section<T extends \"parameter\" | \"storage\" | \"code\">(section: T): MichelsonContractSection<T> {\n        return contractSection(this.contract, section);\n    }\n\n    entryPoints(): [string, MichelsonType][] {\n        return contractEntryPoints(this.contract);\n    }\n\n    entryPoint(ep?: string): MichelsonType | null {\n        return contractEntryPoint(this.contract, ep);\n    }\n\n    assertDataValid<T extends MichelsonType>(d: MichelsonData, t: T): d is MichelsonData<T> {\n        return assertDataValid(d, t, this.ctx);\n    }\n\n    isDataValid<T extends MichelsonType>(d: MichelsonData, t: T): d is MichelsonData<T> {\n        return isDataValid(d, t, this.ctx);\n    }\n\n    assertParameterValid(ep: string | null, d: MichelsonData): void {\n        const t = this.entryPoint(ep || undefined);\n        if (t === null) {\n            throw new Error(`contract has no entrypoint named ${ep}`);\n        }\n        this.assertDataValid(d, t);\n    }\n\n    isParameterValid(ep: string | null, d: MichelsonData): boolean {\n        try {\n            this.assertParameterValid(ep, d);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    functionType(inst: MichelsonCode, stack: MichelsonType[]): MichelsonStackType {\n        return functionType(inst, stack, this.ctx);\n    }\n}\n\nexport const dummyContract = new Contract([\n    { prim: \"parameter\", args: [{ prim: \"unit\" }] },\n    { prim: \"storage\", args: [{ prim: \"unit\" }] },\n    {\n        prim: \"code\", args: [\n            [\n                { prim: \"CAR\" },\n                { prim: \"NIL\", args: [{ prim: \"operation\" }] },\n                { prim: \"PAIR\" },\n            ]\n        ]\n    },\n]);","import { sourceReference, Expr } from \"./micheline\";\nimport { InstructionTrace, MichelsonInstructionError, MichelsonTypeError } from \"./michelson-typecheck\";\nimport { emitMicheline } from \"./micheline-emitter\";\nimport { unpackAnnotations, MichelsonError } from \"./utils\";\nimport { MichelsonStackType } from \"./michelson-types\";\n\nexport function formatStack(s: MichelsonStackType): string {\n    if (\"failed\" in s) {\n        return `[FAILED: ${emitMicheline(s.failed)}]`;\n    }\n\n    return s.map((v, i) => {\n        const ann = unpackAnnotations(v);\n        return `[${i}${ann.v ? \"/\" + ann.v[0] : \"\"}]: ${emitMicheline(v)}`;\n    }).join(\"\\n\");\n}\n\nexport function traceDumpFunc(blocks: boolean, cb: (s: string) => void): (v: InstructionTrace) => void {\n    return (v: InstructionTrace) => {\n        if (Array.isArray(v) && !blocks) {\n            return;\n        }\n        const macro = v.op[sourceReference]?.macro;\n\n        const msg = `${macro ? \"Macro\" : \"Op\"}: ${macro ? emitMicheline(macro, undefined, true) + \" / \" : \"\"}${emitMicheline(v.op)}\nInput:\n${formatStack(v.in)}\nOutput:\n${formatStack(v.out)}\n`;\n        cb(msg);\n    };\n}\n\nexport function formatError(err: MichelsonError): string {\n    if (err instanceof MichelsonInstructionError) {\n        const macro = err.val[sourceReference]?.macro;\n        return `${macro ? \"Macro\" : \"Op\"}: ${macro ? emitMicheline(macro, undefined, true) + \" / \" : \"\"}${emitMicheline(err.val)}\nStack:\n${formatStack(err.stackState)}\n`;\n    } else if (err instanceof MichelsonTypeError) {\n        const type = Array.isArray(err.val) ?\n            \"[\" + (err.val as Expr[]).map((v, i) => `[${i}]: ${emitMicheline(v)}`).join(\"; \") + \"]\" :\n            emitMicheline(err.val);\n\n        return `Type: ${type}\n${err.data ? `Data: ${emitMicheline(err.data)}\n` : \"\"}\n`;\n    } else {\n        return `Value: ${emitMicheline(err.val)}`;\n    }\n}"],"names":["assertArgs"],"mappings":"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"}