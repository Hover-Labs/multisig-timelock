"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTypeEqual = exports.isDataValid = exports.isContractValid = exports.isTypeAnnotationsValid = exports.assertTypesEqual = exports.functionType = exports.assertDataValid = exports.assertContractValid = exports.contractEntryPoints = exports.contractEntryPoint = exports.contractSection = exports.assertTypeAnnotationsValid = exports.MichelsonInstructionError = exports.MichelsonTypeError = void 0;
var utils_1 = require("./utils");
var base58_1 = require("./base58");
var michelson_validator_1 = require("./michelson-validator");
var MichelsonTypeError = /** @class */ (function (_super) {
    __extends(MichelsonTypeError, _super);
    /**
     * @param val Value of a type node caused the error
     * @param data Value of a data node caused the error
     * @param message An error message
     */
    function MichelsonTypeError(val, data, message) {
        var _this = _super.call(this, val, message) || this;
        if (data !== undefined) {
            _this.data = data;
        }
        Object.setPrototypeOf(_this, MichelsonTypeError.prototype);
        return _this;
    }
    return MichelsonTypeError;
}(utils_1.MichelsonError));
exports.MichelsonTypeError = MichelsonTypeError;
var MichelsonInstructionError = /** @class */ (function (_super) {
    __extends(MichelsonInstructionError, _super);
    /**
     * @param val Value of a type node caused the error
     * @param stackState Current stack state
     * @param message An error message
     */
    function MichelsonInstructionError(val, stackState, message) {
        var _this = _super.call(this, val, message) || this;
        _this.stackState = stackState;
        Object.setPrototypeOf(_this, MichelsonInstructionError.prototype);
        return _this;
    }
    return MichelsonInstructionError;
}(utils_1.MichelsonError));
exports.MichelsonInstructionError = MichelsonInstructionError;
function assertScalarTypesEqual(a, b, field) {
    if (field === void 0) { field = false; }
    if (a.prim !== b.prim) {
        throw new MichelsonTypeError(a, undefined, "types mismatch: " + a.prim + " != " + b.prim);
    }
    var ann = [utils_1.unpackAnnotations(a), utils_1.unpackAnnotations(b)];
    if (ann[0].t && ann[1].t && ann[0].t[0] !== ann[1].t[0]) {
        throw new MichelsonTypeError(a, undefined, a.prim + ": type names mismatch: " + ann[0].t[0] + " != " + ann[1].t[0]);
    }
    if (field &&
        (ann[0].f && ann[1].f && ann[0].f[0] !== ann[1].f[0])) {
        throw new MichelsonTypeError(a, undefined, a.prim + ": field names mismatch: " + ann[0].f[0] + " != " + ann[1].f);
    }
    switch (a.prim) {
        case "option":
        case "list":
        case "contract":
        case "set":
            assertScalarTypesEqual(a.args[0], b.args[0]);
            break;
        case "pair":
        case "or":
            assertScalarTypesEqual(a.args[0], b.args[0], true);
            assertScalarTypesEqual(a.args[1], b.args[1], true);
            break;
        case "lambda":
        case "map":
        case "big_map":
            assertScalarTypesEqual(a.args[0], b.args[0]);
            assertScalarTypesEqual(a.args[1], b.args[1]);
    }
}
function assertTypesEqualInternal(a, b, field) {
    if (field === void 0) { field = false; }
    if (Array.isArray(a)) {
        // type guards don't work for parametrized generic types
        var aa = a;
        var bb = b;
        if (aa.length !== bb.length) {
            throw new MichelsonTypeError(aa, undefined, "stack length mismatch: " + aa.length + " != " + bb.length);
        }
        for (var i = 0; i < aa.length; i++) {
            assertScalarTypesEqual(aa[i], bb[i], field);
        }
    }
    else {
        assertScalarTypesEqual(a, b, field);
    }
}
function assertTypeAnnotationsValid(t, field) {
    var _a, _b, _c;
    if (field === void 0) { field = false; }
    var ann = utils_1.unpackAnnotations(t);
    if ((((_a = ann.t) === null || _a === void 0 ? void 0 : _a.length) || 0) > 1) {
        throw new MichelsonTypeError(t, undefined, t.prim + ": at most one type annotation allowed: " + t.annots);
    }
    if (field) {
        if ((((_b = ann.f) === null || _b === void 0 ? void 0 : _b.length) || 0) > 1) {
            throw new MichelsonTypeError(t, undefined, t.prim + ": at most one field annotation allowed: " + t.annots);
        }
    }
    else {
        if ((((_c = ann.f) === null || _c === void 0 ? void 0 : _c.length) || 0) > 0) {
            throw new MichelsonTypeError(t, undefined, t.prim + ": field annotations aren't allowed: " + t.annots);
        }
    }
    switch (t.prim) {
        case "option":
        case "list":
        case "contract":
        case "set":
            assertTypeAnnotationsValid(t.args[0]);
            break;
        case "pair":
        case "or":
            assertTypeAnnotationsValid(t.args[0], true);
            assertTypeAnnotationsValid(t.args[1], true);
            break;
        case "lambda":
        case "map":
        case "big_map":
            assertTypeAnnotationsValid(t.args[0]);
            assertTypeAnnotationsValid(t.args[1]);
    }
}
exports.assertTypeAnnotationsValid = assertTypeAnnotationsValid;
// Data integrity check
var rfc3339Re = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])[T ]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|[+-]([01][0-9]|2[0-3]):([0-5][0-9]))$/;
function parseDate(a) {
    if ("string" in a) {
        if (utils_1.isNatural(a.string)) {
            return new Date(parseInt(a.string, 10));
        }
        else if (rfc3339Re.test(a.string)) {
            var x = new Date(a.string);
            if (!Number.isNaN(x.valueOf)) {
                return x;
            }
        }
    }
    else if (utils_1.isNatural(a.int)) {
        return new Date(parseInt(a.int, 10));
    }
    return null;
}
function compareMichelsonData(t, a, b) {
    switch (t.prim) {
        case "int":
        case "nat":
        case "mutez":
            if (("int" in a) && ("int" in b)) {
                return new utils_1.LongInteger(a.int).cmp(new utils_1.LongInteger(b.int));
            }
            break;
        case "string":
            if (("string" in a) && ("string" in b)) {
                var x = a.string.localeCompare(b.string);
                return x < 0 ? -1 : x > 0 ? 1 : 0;
            }
            break;
        case "bytes":
            if (("bytes" in a) && ("bytes" in b)) {
                var aa = utils_1.parseBytes(a.bytes);
                var bb = utils_1.parseBytes(b.bytes);
                if (aa !== null && bb !== null) {
                    return utils_1.compareBytes(aa, bb);
                }
            }
            break;
        case "bool":
            if (("prim" in a) && ("prim" in b) && (a.prim === "True" || a.prim === "False") && (b.prim === "True" || b.prim === "False")) {
                return a.prim === b.prim ? 0 : a.prim === "False" ? -1 : 1;
            }
            break;
        case "key_hash":
        case "address":
            if (("string" in a) && ("string" in b)) {
                return utils_1.compareBytes(base58_1.decodeBase58Check(a.string), base58_1.decodeBase58Check(b.string));
            }
            break;
        case "timestamp":
            if ((("string" in a) || ("int" in a)) && (("string" in b) || ("int" in b))) {
                var aa = parseDate(a);
                var bb = parseDate(b);
                if (aa !== null && bb !== null) {
                    var x = aa.valueOf() - bb.valueOf();
                    return x < 0 ? -1 : x > 0 ? 1 : 0;
                }
            }
            break;
        case "pair":
            if (("prim" in a) && ("prim" in b) && (a.prim === "Pair") && (b.prim === "Pair")) {
                var x = compareMichelsonData(t.args[0], a.args[0], b.args[0]);
                if (x !== 0) {
                    return x;
                }
                return compareMichelsonData(t.args[1], a.args[1], b.args[1]);
            }
    }
    // Unlikely, types are expected to be verified before the function call
    throw new MichelsonTypeError(t, undefined, "non comparable values: " + a + ", " + b);
}
// Simplified version of assertMichelsonInstruction() for previously validated data
function isFunction(d) {
    var e_1, _a;
    if (!Array.isArray(d)) {
        return false;
    }
    try {
        for (var d_1 = __values(d), d_1_1 = d_1.next(); !d_1_1.done; d_1_1 = d_1.next()) {
            var v = d_1_1.value;
            if (!(Array.isArray(v) && isFunction(v) ||
                ("prim" in v) && Object.prototype.hasOwnProperty.call(michelson_validator_1.instructionIDs, v.prim))) {
                return false;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (d_1_1 && !d_1_1.done && (_a = d_1.return)) _a.call(d_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return true;
}
function assertDataValidInternal(d, t, ctx) {
    var e_2, _a, e_3, _b;
    switch (t.prim) {
        // Atomic literals
        case "int":
            if (("int" in d) && utils_1.isDecimal(d.int)) {
                return;
            }
            throw new MichelsonTypeError(t, d, "integer value expected: " + JSON.stringify(d));
        case "nat":
        case "mutez":
            if (("int" in d) && utils_1.isNatural(d.int)) {
                return;
            }
            throw new MichelsonTypeError(t, d, "natural value expected: " + JSON.stringify(d));
        case "string":
            if ("string" in d) {
                return;
            }
            throw new MichelsonTypeError(t, d, "string value expected: " + JSON.stringify(d));
        case "bytes":
            if ("bytes" in d) {
                return;
            }
            throw new MichelsonTypeError(t, d, "bytes value expected: " + JSON.stringify(d));
        case "bool":
            if (("prim" in d) && (d.prim === "True" || d.prim === "False")) {
                return;
            }
            throw new MichelsonTypeError(t, d, "boolean value expected: " + JSON.stringify(d));
        case "key_hash":
            if (("string" in d) &&
                utils_1.checkTezosID(d.string, "ED25519PublicKeyHash", "SECP256K1PublicKeyHash", "P256PublicKeyHash") !== null) {
                return;
            }
            throw new MichelsonTypeError(t, d, "key hash expected: " + JSON.stringify(d));
        case "timestamp":
            if ((("string" in d) || ("int" in d)) && parseDate(d) !== null) {
                return;
            }
            throw new MichelsonTypeError(t, d, "timestamp expected: " + JSON.stringify(d));
        case "address":
            if ("string" in d) {
                var address = d.string;
                var ep = d.string.indexOf("%");
                if (ep >= 0) {
                    // trim entry point
                    address = d.string.slice(0, ep);
                }
                if (utils_1.checkTezosID(address, "ED25519PublicKeyHash", "SECP256K1PublicKeyHash", "P256PublicKeyHash", "ContractHash") !== null) {
                    return;
                }
            }
            throw new MichelsonTypeError(t, d, "address expected: " + JSON.stringify(d));
        case "key":
            if (("string" in d) &&
                utils_1.checkTezosID(d.string, "ED25519PublicKey", "SECP256K1PublicKey", "P256PublicKey") !== null) {
                return;
            }
            throw new MichelsonTypeError(t, d, "public key expected: " + JSON.stringify(d));
        case "unit":
            if (("prim" in d) && d.prim === "Unit") {
                return;
            }
            throw new MichelsonTypeError(t, d, "unit value expected: " + JSON.stringify(d));
        case "signature":
            if (("string" in d) &&
                utils_1.checkTezosID(d.string, "ED25519Signature", "SECP256K1Signature", "P256Signature", "GenericSignature") !== null) {
                return;
            }
            throw new MichelsonTypeError(t, d, "signature expected: " + JSON.stringify(d));
        case "chain_id":
            if ("bytes" in d) {
                var x = utils_1.parseBytes(d.bytes);
                if (x !== null && x.length === utils_1.tezosPrefix.ChainID[0]) {
                    return;
                }
            }
            throw new MichelsonTypeError(t, d, "chain id expected: " + JSON.stringify(d));
        case "operation":
            throw new MichelsonTypeError(t, d, "operation type can't be represented as a literal value");
        case "contract":
            throw new MichelsonTypeError(t, d, "contract type can't be represented as a literal value");
        // Complex types
        case "option":
            if ("prim" in d) {
                if (d.prim === "None") {
                    return;
                }
                else if (d.prim === "Some") {
                    assertDataValidInternal(d.args[0], t.args[0], ctx);
                    return;
                }
            }
            throw new MichelsonTypeError(t, d, "option expected: " + JSON.stringify(d));
        case "list":
        case "set":
            if (Array.isArray(d)) {
                var prev = void 0;
                try {
                    for (var d_2 = __values(d), d_2_1 = d_2.next(); !d_2_1.done; d_2_1 = d_2.next()) {
                        var v = d_2_1.value;
                        if (("prim" in v) && v.prim === "Elt") {
                            throw new MichelsonTypeError(t, d, "Elt item outside of a map literal: " + JSON.stringify(d));
                        }
                        assertDataValidInternal(v, t.args[0], ctx);
                        if (t.prim === "set") {
                            if (prev === undefined) {
                                prev = v;
                            }
                            else if (compareMichelsonData(t.args[0], prev, v) > 0) {
                                throw new MichelsonTypeError(t, d, "set elements must be ordered: " + JSON.stringify(d));
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (d_2_1 && !d_2_1.done && (_a = d_2.return)) _a.call(d_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return;
            }
            throw new MichelsonTypeError(t, d, t.prim + " expected: " + JSON.stringify(d));
        case "pair":
            if (("prim" in d) && d.prim === "Pair") {
                assertDataValidInternal(d.args[0], t.args[0], ctx);
                assertDataValidInternal(d.args[1], t.args[1], ctx);
                return;
            }
            throw new MichelsonTypeError(t, d, "pair expected: " + JSON.stringify(d));
        case "or":
            if ("prim" in d) {
                if (d.prim === "Left") {
                    assertDataValidInternal(d.args[0], t.args[0], ctx);
                    return;
                }
                else if (d.prim === "Right") {
                    assertDataValidInternal(d.args[0], t.args[1], ctx);
                    return;
                }
            }
            throw new MichelsonTypeError(t, d, "union (or) expected: " + JSON.stringify(d));
        case "lambda":
            if (isFunction(d)) {
                var ret = functionTypeInternal(d, [t.args[0]], ctx);
                if ("failed" in ret) {
                    throw new MichelsonTypeError(t, d, "function is failed with error type: " + ret.failed);
                }
                if (ret.length !== 1) {
                    throw new MichelsonTypeError(t, d, "function must return a value");
                }
                assertTypesEqualInternal(t.args[1], ret[0]);
                return;
            }
            throw new MichelsonTypeError(t, d, "function expected: " + JSON.stringify(d));
        case "map":
        case "big_map":
            if (Array.isArray(d)) {
                var prev = void 0;
                try {
                    for (var d_3 = __values(d), d_3_1 = d_3.next(); !d_3_1.done; d_3_1 = d_3.next()) {
                        var v = d_3_1.value;
                        if (!("prim" in v) || v.prim !== "Elt") {
                            throw new MichelsonTypeError(t, d, "map elements expected: " + JSON.stringify(d));
                        }
                        assertDataValidInternal(v.args[0], t.args[0], ctx);
                        assertDataValidInternal(v.args[1], t.args[1], ctx);
                        if (prev === undefined) {
                            prev = v;
                        }
                        else if (compareMichelsonData(t.args[0], prev.args[0], v.args[0]) > 0) {
                            throw new MichelsonTypeError(t, d, "map elements must be ordered: " + JSON.stringify(d));
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (d_3_1 && !d_3_1.done && (_b = d_3.return)) _b.call(d_3);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return;
            }
            throw new MichelsonTypeError(t, d, t.prim + " expected: " + JSON.stringify(d));
        default:
            throw new MichelsonTypeError(t, d, "unexpected type: " + t.prim);
    }
}
function functionTypeInternal(inst, stack, ctx) {
    var e_4, _a;
    var _b;
    if (Array.isArray(inst)) {
        var ret_1 = stack;
        var s = stack;
        var i = 0;
        try {
            for (var inst_1 = __values(inst), inst_1_1 = inst_1.next(); !inst_1_1.done; inst_1_1 = inst_1.next()) {
                var op = inst_1_1.value;
                var ft = functionTypeInternal(op, s, ctx);
                ret_1 = ft;
                if ("failed" in ft) {
                    break;
                }
                s = ft;
                i++;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (inst_1_1 && !inst_1_1.done && (_a = inst_1.return)) _a.call(inst_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (("failed" in ret_1) && i !== inst.length - 1) {
            throw new MichelsonInstructionError(inst, ret_1, "FAIL must appear in a tail position");
        }
        if ((ctx === null || ctx === void 0 ? void 0 : ctx.traceCallback) !== undefined) {
            var trace = {
                op: inst,
                in: stack,
                out: ret_1,
            };
            ctx.traceCallback(trace);
        }
        return ret_1;
    }
    var instruction = inst; // Make it const for type guarding
    // make sure the stack has enough number of arguments of specific types
    function args(n) {
        var e_5, _a;
        var typeIds = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            typeIds[_i - 1] = arguments[_i];
        }
        if (stack.length < typeIds.length + n) {
            throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": stack must have at least " + typeIds.length + " element(s)");
        }
        var i = n;
        try {
            for (var typeIds_1 = __values(typeIds), typeIds_1_1 = typeIds_1.next(); !typeIds_1_1.done; typeIds_1_1 = typeIds_1.next()) {
                var ids = typeIds_1_1.value;
                if (ids !== null && ids.length !== 0) {
                    var ii = 0;
                    while (ii < ids.length && ids[ii] !== stack[i].prim) {
                        ii++;
                    }
                    if (ii === ids.length) {
                        throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": stack type mismatch: [" + i + "] expected to be " + ids + ", got " + stack[i].prim + " instead");
                    }
                }
                i++;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (typeIds_1_1 && !typeIds_1_1.done && (_a = typeIds_1.return)) _a.call(typeIds_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return stack.slice(n, typeIds.length + n);
    }
    function wrap(fn) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                return fn.apply(void 0, __spread(args));
            }
            catch (err) {
                if (err instanceof utils_1.MichelsonError) {
                    throw new MichelsonInstructionError(instruction, stack, err.message);
                }
                else {
                    throw err;
                }
            }
        };
    }
    function wrapPred(fn) {
        return function (arg) {
            try {
                return fn(arg);
            }
            catch (err) {
                if (err instanceof utils_1.MichelsonError) {
                    throw new MichelsonInstructionError(instruction, stack, err.message);
                }
                else {
                    throw err;
                }
            }
        };
    }
    var argAnnotations = wrap(utils_1.unpackAnnotations);
    var ensureTypesEqual = wrap(assertTypesEqualInternal);
    var ensureComparableType = wrapPred(michelson_validator_1.assertMichelsonComparableType);
    var ensureSerializableType = wrapPred(michelson_validator_1.assertMichelsonSerializableType);
    var ensureStorableType = wrapPred(michelson_validator_1.assertMichelsonStorableType);
    // unpack instruction annotations and assert their maximum number
    function instructionAnnotations(num, opt) {
        var a = utils_1.unpackAnnotations(instruction, opt);
        var assertNum = function (a, n, type) {
            if (a && a.length > (n || 0)) {
                throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": at most " + (n || 0) + " " + type + " annotations allowed");
            }
        };
        assertNum(a.f, num.f, "field");
        assertNum(a.t, num.t, "type");
        assertNum(a.v, num.v, "variable");
        return a;
    }
    // also keeps annotation class if null is provided
    function annotate(t, a) {
        var src = argAnnotations(t);
        var ann = (a.v !== undefined || a.t !== undefined || a.f !== undefined) ? __spread(((a.v === null ? src.v : a.v) || []), ((a.t === null ? src.t : a.t) || []), ((a.f === null ? src.f : a.f) || [])) : undefined;
        var annots = t.annots, rest = __rest(t, ["annots"]);
        return __assign(__assign({}, rest), (ann && ann.length !== 0 && { annots: ann }));
    }
    // shortcut to copy at most one variable annotation from the instruction to the type
    function annotateVar(t, def) {
        var ia = instructionAnnotations({ v: 1 });
        return annotate(t, { v: ia.v !== undefined ? ia.v : def !== undefined ? [def] : null });
    }
    var varSuffix = function (a, suffix) { return ["@" + (a.v ? a.v[0].slice(1) + "." : "") + suffix]; };
    function branchType(br0, br1) {
        if (("failed" in br0) || ("failed" in br1)) {
            // Might be useful for debugging
            if (("failed" in br0) && ("failed" in br1)) {
                try {
                    assertTypesEqualInternal(br0.failed, br1.failed);
                    return br0;
                }
                catch (_a) {
                    return { failed: { prim: "or", args: [br0.failed, br1.failed] } };
                }
            }
            else {
                return ("failed" in br0) ? br1 : br0;
            }
        }
        else {
            ensureTypesEqual(br0, br1);
            return br0;
        }
    }
    var ret;
    switch (instruction.prim) {
        case "DUP":
            ret = __spread([args(0, null)[0]], stack);
            break;
        case "SWAP":
            {
                var s_1 = args(0, null, null);
                instructionAnnotations({});
                ret = __spread([s_1[1], s_1[0]], stack.slice(2));
                break;
            }
        case "SOME":
            ret = __spread([annotate({ prim: "option", args: [args(0, null)[0]] }, instructionAnnotations({ t: 1, v: 1 }))], stack.slice(1));
            break;
        case "UNIT":
            ret = __spread([annotate({ prim: "unit" }, instructionAnnotations({ v: 1, t: 1 }))], stack);
            break;
        case "PAIR":
            {
                var s_2 = args(0, null, null);
                var va_1 = [argAnnotations(s_2[0]), argAnnotations(s_2[1])]; // stack annotations
                var ia_1 = instructionAnnotations({ f: 2, t: 1, v: 1 }, { specialFields: true, emptyFields: true }); // instruction annotations
                var trim_1 = function (s) {
                    var i = s.lastIndexOf(".");
                    return s.slice(i > 0 ? i + 1 : 1);
                };
                var field = function (n) {
                    var _a;
                    return ia_1.f && ia_1.f.length > n && ia_1.f[n] !== "%" ?
                        ia_1.f[n] === "%@" ?
                            va_1[n].v ? ["%" + trim_1(((_a = va_1[n].v) === null || _a === void 0 ? void 0 : _a[0]) || "")] : undefined :
                            [ia_1.f[n]] :
                        undefined;
                };
                ret = __spread([annotate({
                        prim: "pair", args: [
                            annotate(s_2[0], { v: null, t: null, f: field(0) }),
                            annotate(s_2[1], { v: null, t: null, f: field(1) }),
                        ]
                    }, { t: ia_1.t, v: ia_1.v })], stack.slice(2));
                break;
            }
        case "CAR":
        case "CDR":
            {
                var s_3 = args(0, ["pair"]);
                var ia = instructionAnnotations({ f: 1, v: 1 }, { specialVar: true });
                var child = s_3[0].args[instruction.prim === "CAR" ? 0 : 1];
                var ca = argAnnotations(child);
                if (ia.f && ca.f && ia.f[0] !== ca.f[0]) {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": field names doesn't match: " + ia.f[0] + " !== " + ca.f[0]);
                }
                var va = argAnnotations(s_3[0]);
                ret = __spread([annotate(child, {
                        t: null,
                        v: ia.v ?
                            ia.v[0] === "@%" ?
                                ca.f ? ["@" + ca.f[0].slice(1)] : undefined :
                                ia.v[0] === "@%%" ?
                                    va.v ?
                                        ["@" + va.v[0].slice(1) + "." + (ca.f ? ca.f[0].slice(1) : instruction.prim.toLocaleLowerCase())] :
                                        ca.f ? ["@" + ca.f[0].slice(1)] : undefined :
                                    ia.v :
                            null
                    })], stack.slice(1));
                break;
            }
        case "CONS":
            {
                var s_4 = args(0, null, ["list"]);
                ensureTypesEqual(s_4[0], s_4[1].args[0]);
                ret = __spread([annotateVar({ prim: "list", args: [s_4[1].args[0]] })], stack.slice(2));
                break;
            }
        case "SIZE":
            args(0, ["string", "list", "set", "map", "bytes"]);
            ret = __spread([annotateVar({ prim: "nat" })], stack.slice(1));
            break;
        case "MEM":
            {
                var s_5 = args(0, null, ["set", "map", "big_map"]);
                ensureComparableType(s_5[0]);
                ensureTypesEqual(s_5[0], s_5[1].args[0]);
                ret = __spread([annotateVar({ prim: "bool" })], stack.slice(2));
                break;
            }
        case "GET":
            {
                var s_6 = args(0, null, ["map", "big_map"]);
                ensureComparableType(s_6[0]);
                ensureTypesEqual(s_6[0], s_6[1].args[0]);
                ret = __spread([annotateVar({ prim: "option", args: [s_6[1].args[1]] })], stack.slice(2));
                break;
            }
        case "UPDATE":
            {
                var s0 = args(0, null, ["bool", "option"]);
                if (ensureComparableType(s0[0])) {
                    if (s0[1].prim === "bool") {
                        var s1 = args(2, ["set"]);
                        ensureTypesEqual(s0[0], s1[0].args[0]);
                        ret = __spread([annotateVar({
                                prim: "set",
                                args: [annotate(s0[0], { t: null })],
                            })], stack.slice(3));
                    }
                    else {
                        var s1 = args(2, ["map", "big_map"]);
                        ensureTypesEqual(s0[0], s1[0].args[0]);
                        if (s1[0].prim === "map") {
                            ret = __spread([annotateVar({
                                    prim: "map",
                                    args: [
                                        annotate(s0[0], { t: null }),
                                        annotate(s0[1].args[0], { t: null }),
                                    ],
                                })], stack.slice(3));
                        }
                        else if (ensureSerializableType(s0[1].args[0])) {
                            ret = __spread([annotateVar({
                                    prim: "big_map",
                                    args: [
                                        annotate(s0[0], { t: null }),
                                        annotate(s0[1].args[0], { t: null }),
                                    ],
                                })], stack.slice(3));
                        }
                        else {
                            ret = []; // never
                        }
                    }
                }
                else {
                    ret = []; // never
                }
                break;
            }
        case "EXEC":
            {
                var s_7 = args(0, null, ["lambda"]);
                ensureTypesEqual(s_7[0], s_7[1].args[0]);
                ret = __spread([annotateVar(s_7[1].args[1])], stack.slice(2));
                break;
            }
        case "APPLY":
            {
                var s_8 = args(0, null, ["lambda"]);
                if (s_8[1].args[0].prim !== "pair") {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": function's argument must be a pair: " + s_8[1].args[0].prim);
                }
                var pt = s_8[1].args[0];
                ensureTypesEqual(s_8[0], pt.args[0]);
                ret = __spread([annotateVar({ prim: "lambda", args: [pt.args[1], s_8[1].args[1]] })], stack.slice(2));
                break;
            }
        case "FAILWITH":
            ret = { failed: args(0, null)[0] };
            break;
        case "RENAME":
            ret = __spread([annotateVar(args(0, null)[0])], stack.slice(1));
            break;
        case "CONCAT":
            {
                var s0 = args(0, ["string", "list", "bytes"]);
                if (s0[0].prim === "list") {
                    if (s0[0].args[0].prim !== "string" && s0[0].args[0].prim !== "bytes") {
                        throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": can't concatenate list of " + s0[0].args[0].prim + "'s");
                    }
                    ret = __spread([annotateVar(s0[0].args[0])], stack.slice(1));
                }
                else {
                    var s1 = args(1, ["string", "bytes"]);
                    if (s0[0].prim !== s1[0].prim) {
                        throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": can't concatenate " + s0[0].prim + " with " + s1[0].prim);
                    }
                    ret = __spread([annotateVar(s1[0])], stack.slice(2));
                }
                break;
            }
        case "SLICE":
            ret = __spread([annotateVar({ prim: "option", args: [args(0, ["nat"], ["nat"], ["string", "bytes"])[2]] })], stack.slice(3));
            break;
        case "PACK":
            {
                var s_9 = args(0, null);
                ensureSerializableType(s_9[0]);
                ret = __spread([annotateVar({ prim: "bytes" })], stack.slice(1));
                break;
            }
        case "ADD":
            {
                var s_10 = args(0, ["nat", "int", "timestamp", "mutez"], ["nat", "int", "timestamp", "mutez"]);
                if (s_10[0].prim === "nat" && s_10[1].prim === "nat") {
                    ret = __spread([annotateVar({ prim: "nat" })], stack.slice(2));
                }
                else if ((s_10[0].prim === "nat" || s_10[0].prim === "int") && (s_10[1].prim === "nat" || s_10[1].prim === "int")) {
                    ret = __spread([annotateVar({ prim: "int" })], stack.slice(2));
                }
                else if (s_10[0].prim === "int" && s_10[1].prim === "timestamp" || s_10[0].prim === "timestamp" && s_10[1].prim === "int") {
                    ret = __spread([annotateVar({ prim: "timestamp" })], stack.slice(2));
                }
                else if (s_10[0].prim === "mutez" && s_10[1].prim === "mutez") {
                    ret = __spread([annotateVar({ prim: "mutez" })], stack.slice(2));
                }
                else {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": can't add " + s_10[0].prim + " to " + s_10[1].prim);
                }
                break;
            }
        case "SUB":
            {
                var s_11 = args(0, ["nat", "int", "timestamp", "mutez"], ["nat", "int", "timestamp", "mutez"]);
                if (((s_11[0].prim === "nat" || s_11[0].prim === "int") && (s_11[1].prim === "nat" || s_11[1].prim === "int")) ||
                    s_11[0].prim === "timestamp" && s_11[1].prim === "timestamp") {
                    ret = __spread([annotateVar({ prim: "int" })], stack.slice(2));
                }
                else if (s_11[0].prim === "timestamp" && s_11[1].prim === "int") {
                    ret = __spread([annotateVar({ prim: "timestamp" })], stack.slice(2));
                }
                else if (s_11[0].prim === "mutez" && s_11[1].prim === "mutez") {
                    ret = __spread([annotateVar({ prim: "mutez" })], stack.slice(2));
                }
                else {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": can't subtract " + s_11[0].prim + " from " + s_11[1].prim);
                }
                break;
            }
        case "MUL":
            {
                var s_12 = args(0, ["nat", "int", "mutez"], ["nat", "int", "mutez"]);
                if (s_12[0].prim === "nat" && s_12[1].prim === "nat") {
                    ret = __spread([annotateVar({ prim: "nat" })], stack.slice(2));
                }
                else if ((s_12[0].prim === "nat" || s_12[0].prim === "int") && (s_12[1].prim === "nat" || s_12[1].prim === "int")) {
                    ret = __spread([annotateVar({ prim: "int" })], stack.slice(2));
                }
                else if (s_12[0].prim === "nat" && s_12[1].prim === "mutez" || s_12[0].prim === "mutez" && s_12[1].prim === "nat") {
                    ret = __spread([annotateVar({ prim: "mutez" })], stack.slice(2));
                }
                else {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": can't multiply " + s_12[0].prim + " by " + s_12[1].prim);
                }
                break;
            }
        case "EDIV":
            {
                var res = function (a, b) { return ({ prim: "option", args: [{ prim: "pair", args: [{ prim: a }, { prim: b }] }] }); };
                var s_13 = args(0, ["nat", "int", "mutez"], ["nat", "int", "mutez"]);
                if (s_13[0].prim === "nat" && s_13[1].prim === "nat") {
                    ret = __spread([annotateVar(res("nat", "nat"))], stack.slice(2));
                }
                else if ((s_13[0].prim === "nat" || s_13[0].prim === "int") && (s_13[1].prim === "nat" || s_13[1].prim === "int")) {
                    ret = __spread([annotateVar(res("int", "nat"))], stack.slice(2));
                }
                else if (s_13[0].prim === "mutez" && s_13[1].prim === "nat") {
                    ret = __spread([annotateVar(res("mutez", "mutez"))], stack.slice(2));
                }
                else if (s_13[0].prim === "mutez" && s_13[1].prim === "mutez") {
                    ret = __spread([annotateVar(res("nat", "mutez"))], stack.slice(2));
                }
                else {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": can't euclideally divide " + s_13[0].prim + " by " + s_13[1].prim);
                }
                break;
            }
        case "ABS":
            args(0, ["int"]);
            ret = __spread([annotateVar({ prim: "nat" })], stack.slice(1));
            break;
        case "ISNAT":
            args(0, ["int"]);
            ret = __spread([annotateVar({ prim: "option", args: [{ prim: "nat" }] })], stack.slice(1));
            break;
        case "INT":
            args(0, ["nat"]);
            ret = __spread([annotateVar({ prim: "int" })], stack.slice(1));
            break;
        case "NEG":
            args(0, ["nat", "int"]);
            ret = __spread([annotateVar({ prim: "int" })], stack.slice(1));
            break;
        case "LSL":
        case "LSR":
            args(0, ["nat"], ["nat"]);
            ret = __spread([annotateVar({ prim: "nat" })], stack.slice(2));
            break;
        case "OR":
        case "XOR":
            {
                var s_14 = args(0, ["nat", "bool"], ["nat", "bool"]);
                if (s_14[0].prim !== s_14[1].prim) {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": both arguments must be of the same type: " + s_14[0].prim + ", " + s_14[1].prim);
                }
                ret = __spread([annotateVar(s_14[1])], stack.slice(2));
                break;
            }
        case "AND":
            {
                var s_15 = args(0, ["nat", "bool", "int"], ["nat", "bool"]);
                if ((s_15[0].prim !== "int" || s_15[1].prim !== "nat") && s_15[0].prim !== s_15[1].prim) {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": both arguments must be of the same type: " + s_15[0].prim + ", " + s_15[1].prim);
                }
                ret = __spread([annotateVar(s_15[1])], stack.slice(2));
                break;
            }
        case "NOT":
            {
                var s_16 = args(0, ["nat", "bool", "int"]);
                if (s_16[0].prim === "bool") {
                    ret = __spread([annotateVar({ prim: "bool" })], stack.slice(1));
                }
                else {
                    ret = __spread([annotateVar({ prim: "int" })], stack.slice(1));
                }
                break;
            }
        case "COMPARE":
            {
                var s_17 = args(0, null, null);
                ensureComparableType(s_17[0]);
                ensureComparableType(s_17[1]);
                ret = __spread([annotateVar({ prim: "int" })], stack.slice(2));
                break;
            }
        case "EQ":
        case "NEQ":
        case "LT":
        case "GT":
        case "LE":
        case "GE":
            args(0, ["int"]);
            ret = __spread([annotateVar({ prim: "bool" })], stack.slice(1));
            break;
        case "SELF":
            {
                if ((ctx === null || ctx === void 0 ? void 0 : ctx.contract) === undefined) {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": contract required");
                }
                var ia = instructionAnnotations({ f: 1, v: 1 });
                var ep = contractEntryPoint(ctx.contract, (_b = ia.f) === null || _b === void 0 ? void 0 : _b[0]);
                if (ep === null) {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": contract has no entrypoint named " + ep);
                }
                ret = __spread([annotate({ prim: "contract", args: [ep] }, { v: ia.v ? ia.v : ["@self"] })], stack);
                break;
            }
        case "TRANSFER_TOKENS":
            {
                var s_18 = args(0, null, ["mutez"], ["contract"]);
                ensureTypesEqual(s_18[0], s_18[2].args[0]);
                ret = __spread([annotateVar({ prim: "operation" })], stack.slice(3));
                break;
            }
        case "SET_DELEGATE":
            {
                var s_19 = args(0, ["option"]);
                if (s_19[0].args[0].prim !== "key_hash") {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": key hash expected: " + s_19[0].args[0].prim);
                }
                ret = __spread([annotateVar({ prim: "operation" })], stack.slice(1));
                break;
            }
        case "CREATE_ACCOUNT":
            {
                var ia = instructionAnnotations({ v: 2 }, { emptyVar: true });
                var s_20 = args(0, ["key_hash"], ["option"], ["bool"], ["mutez"]);
                if (s_20[1].args[0].prim !== "key_hash") {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": key hash expected: " + s_20[1].args[0].prim);
                }
                ret = __spread([
                    annotate({ prim: "operation" }, { v: ia.v && ia.v.length > 0 && ia.v[0] !== "@" ? [ia.v[0]] : undefined }),
                    annotate({ prim: "address" }, { v: ia.v && ia.v.length > 1 && ia.v[1] !== "@" ? [ia.v[1]] : undefined })
                ], stack.slice(4));
                break;
            }
        case "IMPLICIT_ACCOUNT":
            args(0, ["key_hash"]);
            ret = __spread([annotateVar({ prim: "contract", args: [{ prim: "unit" }] })], stack.slice(1));
            break;
        case "NOW":
            ret = __spread([annotateVar({ prim: "timestamp" }, "@now")], stack);
            break;
        case "AMOUNT":
            ret = __spread([annotateVar({ prim: "mutez" }, "@amount")], stack);
            break;
        case "BALANCE":
            ret = __spread([annotateVar({ prim: "mutez" }, "@balance")], stack);
            break;
        case "CHECK_SIGNATURE":
            args(0, ["key"], ["signature"], ["bytes"]);
            ret = __spread([annotateVar({ prim: "bool" })], stack.slice(3));
            break;
        case "BLAKE2B":
        case "SHA256":
        case "SHA512":
            args(0, ["bytes"]);
            ret = __spread([annotateVar({ prim: "bytes" })], stack.slice(1));
            break;
        case "HASH_KEY":
            args(0, ["key"]);
            ret = __spread([annotateVar({ prim: "key_hash" })], stack.slice(1));
            break;
        case "STEPS_TO_QUOTA":
            ret = __spread([annotateVar({ prim: "nat" }, "@steps")], stack);
            break;
        case "SOURCE":
            ret = __spread([annotateVar({ prim: "address" }, "@source")], stack);
            break;
        case "SENDER":
            ret = __spread([annotateVar({ prim: "address" }, "@sender")], stack);
            break;
        case "ADDRESS":
            {
                var s_21 = args(0, ["contract"]);
                var ia = instructionAnnotations({ v: 1 });
                ret = __spread([
                    annotate({ prim: "address" }, { v: ia.v ? ia.v : varSuffix(argAnnotations(s_21[0]), "address") })
                ], stack.slice(1));
                break;
            }
        case "CHAIN_ID":
            ret = __spread([annotateVar({ prim: "chain_id" })], stack);
            break;
        case "DROP":
            {
                instructionAnnotations({});
                var n = instruction.args !== undefined ? parseInt(instruction.args[0].int, 10) : 1;
                args(n - 1, null);
                ret = stack.slice(n);
                break;
            }
        case "DIG":
            {
                instructionAnnotations({});
                var n = parseInt(instruction.args[0].int, 10);
                ret = __spread([args(n, null)[0]], stack.slice(0, n), stack.slice(n + 1));
                break;
            }
        case "DUG":
            {
                instructionAnnotations({});
                var n = parseInt(instruction.args[0].int, 10);
                ret = __spread(stack.slice(1, n + 1), [args(0, null)[0]], stack.slice(n + 1));
                break;
            }
        case "NONE":
            assertTypeAnnotationsValid(instruction.args[0]);
            ret = __spread([annotate({ prim: "option", args: [instruction.args[0]] }, instructionAnnotations({ t: 1, v: 1 }))], stack);
            break;
        case "LEFT":
        case "RIGHT":
            {
                var s_22 = args(0, null);
                var ia = instructionAnnotations({ f: 2, t: 1, v: 1 }, { specialFields: true });
                var va = argAnnotations(s_22[0]);
                var children = [
                    annotate(s_22[0], {
                        t: null,
                        v: null,
                        f: ia.f && ia.f.length > 0 && ia.f[0] !== "%" ?
                            ia.f[0] === "%@" ?
                                va.v ? ["%" + va.v[0].slice(1)] : undefined :
                                ia.f :
                            undefined,
                    }),
                    annotate(instruction.args[0], {
                        t: null,
                        f: ia.f && ia.f.length > 1 && ia.f[1] !== "%" ? ia.f : undefined,
                    }),
                ];
                ret = __spread([annotate({
                        prim: "or", args: instruction.prim === "LEFT" ? children : [children[1], children[0]]
                    }, { t: ia.t, v: ia.v })], stack.slice(1));
                break;
            }
        case "NIL":
            assertTypeAnnotationsValid(instruction.args[0]);
            ret = __spread([annotate({ prim: "list", args: [instruction.args[0]] }, instructionAnnotations({ t: 1, v: 1 }))], stack);
            break;
        case "UNPACK":
            args(0, ["bytes"]);
            assertTypeAnnotationsValid(instruction.args[0]);
            ret = __spread([annotateVar({ prim: "option", args: [instruction.args[0]] })], stack.slice(1));
            break;
        case "CONTRACT":
            {
                var s_23 = args(0, ["address"]);
                assertTypeAnnotationsValid(instruction.args[0]);
                var ia = instructionAnnotations({ v: 1, f: 1 });
                ret = __spread([
                    annotate({ prim: "option", args: [{ prim: "contract", args: [instruction.args[0]] }] }, { v: ia.v ? ia.v : varSuffix(argAnnotations(s_23[0]), "contract") })
                ], stack.slice(1));
                break;
            }
        case "CAST":
            instructionAnnotations({});
            var s = args(0, null);
            assertTypeAnnotationsValid(instruction.args[0]);
            assertTypesEqualInternal(instruction.args[0], s[0]);
            ret = __spread([instruction.args[0]], stack.slice(1));
            break;
        case "IF_NONE":
            {
                instructionAnnotations({});
                var s_24 = args(0, ["option"]);
                var tail = stack.slice(1);
                var br0 = functionTypeInternal(instruction.args[0], tail, ctx);
                var br1 = functionTypeInternal(instruction.args[1], __spread([annotate(s_24[0].args[0], { t: null, v: varSuffix(argAnnotations(s_24[0]), "some") })], tail), ctx);
                ret = branchType(br0, br1);
                break;
            }
        case "IF_LEFT":
            {
                instructionAnnotations({});
                var s_25 = args(0, ["or"]);
                var va = argAnnotations(s_25[0]);
                var lefta = argAnnotations(s_25[0].args[0]);
                var righta = argAnnotations(s_25[0].args[1]);
                var tail = stack.slice(1);
                var br0 = functionTypeInternal(instruction.args[0], __spread([
                    annotate(s_25[0].args[0], { t: null, v: varSuffix(va, lefta.f ? lefta.f[0].slice(1) : "left") })
                ], tail), ctx);
                var br1 = functionTypeInternal(instruction.args[1], __spread([
                    annotate(s_25[0].args[1], { t: null, v: varSuffix(va, righta.f ? righta.f[0].slice(1) : "right") })
                ], tail), ctx);
                ret = branchType(br0, br1);
                break;
            }
        case "IF_CONS":
            {
                instructionAnnotations({});
                var s_26 = args(0, ["list"]);
                var va = argAnnotations(s_26[0]);
                var tail = stack.slice(1);
                var br0 = functionTypeInternal(instruction.args[0], __spread([
                    annotate(s_26[0].args[0], { t: null, v: varSuffix(va, "hd") }),
                    annotate(s_26[0], { t: null, v: varSuffix(va, "tl") })
                ], tail), ctx);
                var br1 = functionTypeInternal(instruction.args[1], tail, ctx);
                ret = branchType(br0, br1);
                break;
            }
        case "IF":
            {
                instructionAnnotations({});
                args(0, ["bool"]);
                var tail = stack.slice(1);
                var br0 = functionTypeInternal(instruction.args[0], tail, ctx);
                var br1 = functionTypeInternal(instruction.args[1], tail, ctx);
                ret = branchType(br0, br1);
                break;
            }
        case "MAP":
            {
                var s_27 = args(0, ["list", "map"]);
                var tail = stack.slice(1);
                var elt = s_27[0].prim === "map" ? { prim: "pair", args: s_27[0].args } : s_27[0].args[0];
                var body = functionTypeInternal(instruction.args[0], __spread([annotate(elt, { t: null, v: varSuffix(argAnnotations(s_27[0]), "elt") })], tail), ctx);
                if ("failed" in body) {
                    ret = body;
                }
                else {
                    if (body.length < 1) {
                        throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": function must return a value");
                    }
                    ensureTypesEqual(body.slice(1), tail);
                    if (s_27[0].prim === "list") {
                        ret = __spread([annotateVar({ prim: "list", args: [body[0]] })], tail);
                    }
                    else {
                        ret = __spread([annotateVar({ prim: "map", args: [s_27[0].args[0], body[0]] })], tail);
                    }
                }
                break;
            }
        case "ITER":
            {
                instructionAnnotations({});
                var s_28 = args(0, ["set", "list", "map"]);
                var tail = stack.slice(1);
                var elt = s_28[0].prim === "map" ? { prim: "pair", args: s_28[0].args } : s_28[0].args[0];
                var body = functionTypeInternal(instruction.args[0], __spread([annotate(elt, { t: null, v: varSuffix(argAnnotations(s_28[0]), "elt") })], tail), ctx);
                if ("failed" in body) {
                    ret = body;
                }
                else {
                    ensureTypesEqual(body, tail);
                    ret = tail;
                }
                break;
            }
        case "LOOP":
            {
                instructionAnnotations({});
                args(0, ["bool"]);
                var tail = stack.slice(1);
                var body = functionTypeInternal(instruction.args[0], tail, ctx);
                if ("failed" in body) {
                    ret = body;
                }
                else {
                    ensureTypesEqual(body, __spread([{ prim: "bool" }], tail));
                    ret = tail;
                }
                break;
            }
        case "LOOP_LEFT":
            {
                instructionAnnotations({});
                var s_29 = args(0, ["or"]);
                var tail = stack.slice(1);
                var body = functionTypeInternal(instruction.args[0], __spread([annotate(s_29[0].args[0], { t: null, v: varSuffix(argAnnotations(s_29[0]), "left") })], tail), ctx);
                if ("failed" in body) {
                    ret = body;
                }
                else {
                    ensureTypesEqual(body, __spread([s_29[0]], tail));
                    ret = __spread([annotate(s_29[0].args[1], { t: null, v: instructionAnnotations({ v: 1 }).v })], tail);
                }
                break;
            }
        case "DIP":
            {
                instructionAnnotations({});
                var n = instruction.args.length === 2 ? parseInt(instruction.args[0].int, 10) : 1;
                args(n - 1, null);
                var head = stack.slice(0, n);
                var tail = stack.slice(n);
                // ternary operator is a type guard so use it instead of just `instruction.args.length - 1`
                var body = instruction.args.length === 2 ?
                    functionTypeInternal(instruction.args[1], tail, ctx) :
                    functionTypeInternal(instruction.args[0], tail, ctx);
                if ("failed" in body) {
                    ret = body;
                }
                else {
                    ret = __spread(head, body);
                }
                break;
            }
        case "CREATE_CONTRACT":
            {
                var ia = instructionAnnotations({ v: 2 }, { emptyVar: true });
                var s_30 = args(0, ["option"], ["mutez"], null);
                if (s_30[0].args[0].prim !== "key_hash") {
                    throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": key hash expected: " + s_30[0].args[0].prim);
                }
                if (ensureStorableType(s_30[2])) {
                    assertContractValid(instruction.args[0]);
                    assertTypesEqualInternal(contractSection(instruction.args[0], "storage").args[0], s_30[2]);
                }
                ret = __spread([
                    annotate({ prim: "operation" }, { v: ia.v && ia.v.length > 0 && ia.v[0] !== "@" ? [ia.v[0]] : undefined }),
                    annotate({ prim: "address" }, { v: ia.v && ia.v.length > 1 && ia.v[1] !== "@" ? [ia.v[1]] : undefined })
                ], stack.slice(3));
                break;
            }
        case "PUSH":
            assertTypeAnnotationsValid(instruction.args[0]);
            assertDataValidInternal(instruction.args[1], instruction.args[0], ctx);
            ret = __spread([annotateVar(instruction.args[0])], stack);
            break;
        case "EMPTY_SET":
            assertTypeAnnotationsValid(instruction.args[0]);
            ret = __spread([annotate({ prim: "set", args: instruction.args }, instructionAnnotations({ t: 1, v: 1 }))], stack);
            break;
        case "EMPTY_MAP":
            assertTypeAnnotationsValid(instruction.args[0]);
            assertTypeAnnotationsValid(instruction.args[1]);
            ret = __spread([annotate({ prim: "map", args: instruction.args }, instructionAnnotations({ t: 1, v: 1 }))], stack);
            break;
        case "EMPTY_BIG_MAP":
            assertTypeAnnotationsValid(instruction.args[0]);
            assertTypeAnnotationsValid(instruction.args[1]);
            ret = __spread([annotate({ prim: "big_map", args: instruction.args }, instructionAnnotations({ t: 1, v: 1 }))], stack);
            break;
        case "LAMBDA":
            {
                assertTypeAnnotationsValid(instruction.args[0]);
                assertTypeAnnotationsValid(instruction.args[1]);
                var body = functionTypeInternal(instruction.args[2], [instruction.args[0]], ctx);
                if ("failed" in body) {
                    ret = body;
                }
                else {
                    if (body.length !== 1) {
                        throw new MichelsonInstructionError(instruction, stack, instruction.prim + ": function must return a value");
                    }
                    assertTypesEqualInternal(instruction.args[1], body[0]);
                    ret = __spread([annotateVar({ prim: "lambda", args: [instruction.args[0], instruction.args[1]] })], stack);
                }
                break;
            }
        default:
            throw new utils_1.MichelsonError(instruction, "unexpected instruction: " + instruction.prim);
    }
    if ((ctx === null || ctx === void 0 ? void 0 : ctx.traceCallback) !== undefined) {
        var trace = {
            op: instruction,
            in: stack,
            out: ret,
        };
        ctx.traceCallback(trace);
    }
    return ret;
}
function contractSection(contract, section) {
    var e_6, _a;
    try {
        for (var contract_1 = __values(contract), contract_1_1 = contract_1.next(); !contract_1_1.done; contract_1_1 = contract_1.next()) {
            var s = contract_1_1.value;
            if (s.prim === section) {
                return s;
            }
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (contract_1_1 && !contract_1_1.done && (_a = contract_1.return)) _a.call(contract_1);
        }
        finally { if (e_6) throw e_6.error; }
    }
    throw new utils_1.MichelsonError(contract, "missing contract section: " + section);
}
exports.contractSection = contractSection;
function contractEntryPoint(src, ep) {
    ep = ep || "%default";
    var entryPoint = contractEntryPoints(src).find(function (x) { return x[0] === ep; });
    if (entryPoint !== undefined) {
        return entryPoint[1];
    }
    else if (ep === "%default") {
        return Array.isArray(src) ? contractSection(src, "parameter").args[0] : src;
    }
    return null;
}
exports.contractEntryPoint = contractEntryPoint;
function contractEntryPoints(src) {
    if (Array.isArray(src)) {
        var param = contractSection(src, "parameter");
        var ch = contractEntryPoints(param.args[0]);
        var a = utils_1.unpackAnnotations(param);
        return a.f ? __spread([[a.f[0], param.args[0]]], ch) : ch;
    }
    if (src.prim === "or") {
        var getArg = function (n) {
            var a = utils_1.unpackAnnotations(src.args[n]);
            if (src.args[n].prim === "or") {
                var ch = contractEntryPoints(src.args[n]);
                return a.f ? __spread([[a.f[0], src.args[n]]], ch) : ch;
            }
            return a.f ? [[a.f[0], src.args[n]]] : [];
        };
        return __spread(getArg(0), getArg(1));
    }
    return [];
}
exports.contractEntryPoints = contractEntryPoints;
// Contract validation
function assertContractValid(contract, ctx) {
    var parameter = contractSection(contract, "parameter").args[0];
    assertTypeAnnotationsValid(parameter, true);
    var storage = contractSection(contract, "storage").args[0];
    assertTypeAnnotationsValid(storage);
    var arg = {
        "prim": "pair",
        args: [
            __assign(__assign({}, parameter), { annots: ["@parameter"] }),
            __assign(__assign({}, storage), { annots: ["@storage"] }),
        ]
    };
    var code = contractSection(contract, "code").args[0];
    var ret = functionTypeInternal(code, [arg], __assign(__assign({}, ctx), { contract: contract }));
    if ("failed" in ret) {
        // throw new MichelsonInstructionError(code, ret, `contract fails with ${ret.failed.prim} error type`);
        return ret;
    }
    var expected = {
        "prim": "pair",
        args: [
            { "prim": "list", args: [{ "prim": "operation" }] },
            storage,
        ]
    };
    try {
        assertTypesEqualInternal(ret, [expected]);
    }
    catch (err) {
        if (err instanceof utils_1.MichelsonError) {
            throw new MichelsonInstructionError(code, ret, err.message);
        }
        else {
            throw err;
        }
    }
    return ret;
}
exports.assertContractValid = assertContractValid;
// Exported wrapper functions
function assertDataValid(d, t, ctx) {
    assertTypeAnnotationsValid(t);
    assertDataValidInternal(d, t, ctx || null);
    return true;
}
exports.assertDataValid = assertDataValid;
function functionType(inst, stack, ctx) {
    var e_7, _a, e_8, _b;
    try {
        for (var stack_1 = __values(stack), stack_1_1 = stack_1.next(); !stack_1_1.done; stack_1_1 = stack_1.next()) {
            var t = stack_1_1.value;
            assertTypeAnnotationsValid(t);
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (stack_1_1 && !stack_1_1.done && (_a = stack_1.return)) _a.call(stack_1);
        }
        finally { if (e_7) throw e_7.error; }
    }
    if ((ctx === null || ctx === void 0 ? void 0 : ctx.contract) !== undefined) {
        try {
            for (var _c = __values(["parameter", "storage"]), _d = _c.next(); !_d.done; _d = _c.next()) {
                var typesec = _d.value;
                var sec = contractSection(ctx.contract, typesec).args[0];
                assertTypeAnnotationsValid(sec);
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_8) throw e_8.error; }
        }
    }
    return functionTypeInternal(inst, stack, ctx || null);
}
exports.functionType = functionType;
function assertTypesEqual(a, b, field) {
    var e_9, _a, e_10, _b;
    if (field === void 0) { field = false; }
    if (Array.isArray(a)) {
        try {
            // type guards don't work for parametrized generic types
            for (var _c = __values(a), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                assertTypeAnnotationsValid(v);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_9) throw e_9.error; }
        }
        try {
            for (var _e = __values(b), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                assertTypeAnnotationsValid(v);
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_10) throw e_10.error; }
        }
    }
    else {
        assertTypeAnnotationsValid(a);
        assertTypeAnnotationsValid(b);
    }
    assertTypesEqualInternal(a, b, field);
}
exports.assertTypesEqual = assertTypesEqual;
function isTypeAnnotationsValid(t, field) {
    if (field === void 0) { field = false; }
    try {
        assertTypeAnnotationsValid(t, field);
        return true;
    }
    catch (_a) {
        return false;
    }
}
exports.isTypeAnnotationsValid = isTypeAnnotationsValid;
function isContractValid(contract, ctx) {
    try {
        return assertContractValid(contract, ctx);
    }
    catch (_a) {
        return null;
    }
}
exports.isContractValid = isContractValid;
function isDataValid(d, t, ctx) {
    try {
        return assertDataValid(d, t, ctx);
    }
    catch (_a) {
        return false;
    }
}
exports.isDataValid = isDataValid;
function isTypeEqual(a, b, field) {
    if (field === void 0) { field = false; }
    try {
        assertTypesEqual(a, b, field);
        return true;
    }
    catch (_a) {
        return false;
    }
}
exports.isTypeEqual = isTypeEqual;
//# sourceMappingURL=michelson-typecheck.js.map